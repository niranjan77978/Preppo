{
  "quiz_title": "MERN Stack Mastery",
  "total_questions": 100,
  "questions": [
    {
      "id": 1,
      "question": "In HTML5, which semantic tag is best for enclosing navigation links?",
      "option1": "<section>",
      "option2": "<nav>",
      "option3": "<header>",
      "option4": "<aside>",
      "correct_option": "option2"
    },
    {
      "id": 2,
      "question": "Which HTML5 attribute makes an input required before form submission?",
      "option1": "validate",
      "option2": "mandatory",
      "option3": "required",
      "option4": "check",
      "correct_option": "option3"
    },
    {
      "id": 3,
      "question": "How do you include an external CSS file called \"styles.css\" in your HTML?",
      "option1": "<link rel=\"stylesheet\" href=\"styles.css\">",
      "option2": "<style src=\"styles.css\"></style>",
      "option3": "<css href=\"styles.css\" rel=\"stylesheet\">",
      "option4": "<script href=\"styles.css\"></script>",
      "correct_option": "option1"
    },
    {
      "id": 4,
      "question": "Which CSS selector will target elements with both class \"card\" and \"active\"?",
      "option1": ".card, .active",
      "option2": ".card.active",
      "option3": "#card .active",
      "option4": ".card > .active",
      "correct_option": "option2"
    },
    {
      "id": 5,
      "question": "What does the CSS property z-index control?",
      "option1": "Font size",
      "option2": "Vertical spacing",
      "option3": "Stacking order of positioned elements",
      "option4": "Opacity",
      "correct_option": "option3"
    },
    {
      "id": 6,
      "question": "How do you declare a variable in modern JavaScript (ES6+)?",
      "option1": "int x = 5;",
      "option2": "var x = 5;",
      "option3": "let x = 5;",
      "option4": "num x = 5;",
      "correct_option": "option3"
    },
    {
      "id": 7,
      "question": "Which method converts a JS promise into synchronous resultless code style?",
      "option1": "async / await",
      "option2": ".then()",
      "option3": "Promise.resolve()",
      "option4": "try/catch",
      "correct_option": "option1"
    },
    {
      "id": 8,
      "question": "What is the output of: Array.from('abc')?",
      "option1": "['a','b','c']",
      "option2": "[ 'abc' ]",
      "option3": "undefined",
      "option4": "Error",
      "correct_option": "option1"
    },
    {
      "id": 9,
      "question": "Which lifecycle hook in React class components runs right after the component mounts?",
      "option1": "componentDidMount",
      "option2": "shouldComponentUpdate",
      "option3": "render",
      "option4": "getDerivedStateFromProps",
      "correct_option": "option1"
    },
    {
      "id": 10,
      "question": "When using React hooks, what does useState return?",
      "option1": "Only the current state value",
      "option2": "An array with current state and setter function",
      "option3": "A promise of state",
      "option4": "A Redux store",
      "correct_option": "option2"
    },
    {
      "id": 11,
      "question": "What hook would you use to memoize a value based on dependencies?",
      "option1": "useMemo",
      "option2": "useCallback",
      "option3": "useRef",
      "option4": "useEffect",
      "correct_option": "option1"
    },
    {
      "id": 12,
      "question": "Which method do you use in Express to define a POST route handler?",
      "option1": "app.get()",
      "option2": "app.post()",
      "option3": "router.fetch()",
      "option4": "server.on()",
      "correct_option": "option2"
    },
    {
      "id": 13,
      "question": "In Express middleware, what function must you call to pass control to the next middleware?",
      "option1": "resume()",
      "option2": "continue()",
      "option3": "next()",
      "option4": "nextMiddleware()",
      "correct_option": "option3"
    },
    {
      "id": 14,
      "question": "How do you parse JSON payloads in Express 4.x?",
      "option1": "server.useBodyParser()",
      "option2": "app.use(express.json())",
      "option3": "app.use(bodyParser.urlencoded())",
      "option4": "res.jsonParser()",
      "correct_option": "option2"
    },
    {
      "id": 15,
      "question": "Which MongoDB feature ensures a single collection-wide index on a field?",
      "option1": "Unique constraint",
      "option2": "Compound key",
      "option3": "Text search",
      "option4": "Cursor",
      "correct_option": "option1"
    },
    {
      "id": 16,
      "question": "How do you define a schema in Mongoose?",
      "option1": "const schema = new mongoose.Schema({ name: String });",
      "option2": "mongoose.defineSchema({...})",
      "option3": "mongoose.createModel()",
      "option4": "mongoose.initSchema()",
      "correct_option": "option1"
    },
    {
      "id": 17,
      "question": "What does Mongoose’s `populate()` method do?",
      "option1": "Inserts documents into MongoDB",
      "option2": "Fills referenced documents in query results",
      "option3": "Validates schema before save",
      "option4": "Generates an index",
      "correct_option": "option2"
    },
    {
      "id": 18,
      "question": "Which command installs MongoDB locally via npm (for dev only)?",
      "option1": "npm install mongodb",
      "option2": "npm install postgres",
      "option3": "npm install mongoose",
      "option4": "npm install mongo-express",
      "correct_option": "option1"
    },
    {
      "id": 19,
      "question": "To protect routes in Express, which package is commonly used for JWT?",
      "option1": "passport-jwt",
      "option2": "bcrypt",
      "option3": "cookie-parser",
      "option4": "helmet",
      "correct_option": "option1"
    },
    {
      "id": 20,
      "question": "In React Router v6, which component guards a route’s element prop?",
      "option1": "<PrivateRoute>",
      "option2": "<RouteGuard>",
      "option3": "<Outlet>",
      "option4": "<Navigate>",
      "correct_option": "option4"
    },
    {
      "id": 21,
      "question": "Which React hook allows subscribing to context values?",
      "option1": "useContext",
      "option2": "useReducer",
      "option3": "useEffect",
      "option4": "useState",
      "correct_option": "option1"
    },
    {
      "id": 22,
      "question": "What’s the main benefit of a Redux reducer being pure?",
      "option1": "Easier to save to database",
      "option2": "Predictable state transitions",
      "option3": "Faster UI rendering",
      "option4": "Server-side rendering",
      "correct_option": "option2"
    },
    {
      "id": 23,
      "question": "Which HTTP status code indicates a resource was not found?",
      "option1": "200",
      "option2": "400",
      "option3": "404",
      "option4": "500",
      "correct_option": "option3"
    },
    {
      "id": 24,
      "question": "Which command is used to initialize a Node.js project?",
      "option1": "node init",
      "option2": "npm init",
      "option3": "npm start",
      "option4": "node start",
      "correct_option": "option2"
    },
    {
      "id": 25,
      "question": "What does MongoDB store data in?",
      "option1": "Tables",
      "option2": "Documents",
      "option3": "Arrays",
      "option4": "Columns",
      "correct_option": "option2"
    },
    {
      "id": 26,
      "question": "Which MongoDB shell command displays all databases?",
      "option1": "SHOW ALL",
      "option2": "db.getAll()",
      "option3": "show dbs",
      "option4": "db.list()",
      "correct_option": "option3"
    },
    {
      "id": 27,
      "question": "In Mongoose, which method is used to update a document by ID?",
      "option1": "update()",
      "option2": "findByIdAndUpdate()",
      "option3": "updateDocument()",
      "option4": "setById()",
      "correct_option": "option2"
    },
    {
      "id": 28,
      "question": "Which HTTP method is used for creating new resources?",
      "option1": "GET",
      "option2": "POST",
      "option3": "PUT",
      "option4": "DELETE",
      "correct_option": "option2"
    },
    {
      "id": 29,
      "question": "What does JWT stand for?",
      "option1": "Java Web Token",
      "option2": "JavaScript Web Token",
      "option3": "JSON Web Token",
      "option4": "JavaScript Widget Token",
      "correct_option": "option3"
    },
    {
      "id": 30,
      "question": "Which hook is used to manage local state in functional React components?",
      "option1": "useRef",
      "option2": "useMemo",
      "option3": "useState",
      "option4": "useEffect",
      "correct_option": "option3"
    },
    {
      "id": 31,
      "question": "Which Node.js module is used to create a server?",
      "option1": "http",
      "option2": "url",
      "option3": "fs",
      "option4": "path",
      "correct_option": "option1"
    },
    {
      "id": 32,
      "question": "In RESTful API design, what does the PUT method typically do?",
      "option1": "Creates a resource",
      "option2": "Deletes a resource",
      "option3": "Updates an existing resource",
      "option4": "Fetches data",
      "correct_option": "option3"
    },
    {
      "id": 33,
      "question": "Which middleware is commonly used to parse incoming JSON in Express?",
      "option1": "express.static",
      "option2": "body-parser",
      "option3": "express.json()",
      "option4": "json-parser",
      "correct_option": "option3"
    },
    {
      "id": 34,
      "question": "Which React hook is best for memoizing expensive calculations?",
      "option1": "useEffect",
      "option2": "useState",
      "option3": "useMemo",
      "option4": "useRef",
      "correct_option": "option3"
    },
    {
      "id": 35,
      "question": "How do you access route parameters in Express?",
      "option1": "req.body.param",
      "option2": "req.query.param",
      "option3": "req.params.param",
      "option4": "req.route.param",
      "correct_option": "option3"
    },
    {
      "id": 36,
      "question": "Which component in React Router is used to define route paths?",
      "option1": "<Route>",
      "option2": "<Switch>",
      "option3": "<Redirect>",
      "option4": "<Path>",
      "correct_option": "option1"
    },
    {
      "id": 37,
      "question": "What does the 'key' prop help with in React lists?",
      "option1": "Debugging",
      "option2": "Optimized rendering",
      "option3": "CSS styling",
      "option4": "Component lifecycle",
      "correct_option": "option2"
    },
    {
      "id": 38,
      "question": "Which of the following is a NoSQL database?",
      "option1": "PostgreSQL",
      "option2": "MongoDB",
      "option3": "MySQL",
      "option4": "SQLite",
      "correct_option": "option2"
    },
    {
      "id": 39,
      "question": "In MongoDB, what is a collection analogous to in SQL databases?",
      "option1": "Row",
      "option2": "Column",
      "option3": "Table",
      "option4": "Field",
      "correct_option": "option3"
    },
    {
      "id": 40,
      "question": "Which lifecycle method is invoked just before a component is removed?",
      "option1": "componentDidMount",
      "option2": "componentDidUpdate",
      "option3": "componentWillUnmount",
      "option4": "shouldComponentUpdate",
      "correct_option": "option3"
    },
    {
      "id": 41,
      "question": "Which tool is commonly used for API testing in MERN development?",
      "option1": "Postman",
      "option2": "Webpack",
      "option3": "Jest",
      "option4": "Mocha",
      "correct_option": "option1"
    },
    {
      "id": 42,
      "question": "What is the main role of Redux Thunk?",
      "option1": "Style management",
      "option2": "Routing",
      "option3": "Handling async logic in actions",
      "option4": "Bundling code",
      "correct_option": "option3"
    },
    {
      "id": 43,
      "question": "What is the purpose of CORS in a Node.js backend?",
      "option1": "Security headers",
      "option2": "Cross-origin request permissions",
      "option3": "Rate limiting",
      "option4": "Encryption",
      "correct_option": "option2"
    },
    {
      "id": 44,
      "question": "How can we serve static files in Express?",
      "option1": "app.serveStatic()",
      "option2": "express.static()",
      "option3": "app.public()",
      "option4": "static()",
      "correct_option": "option2"
    },
    {
      "id": 45,
      "question": "Which npm command installs a package as a dev dependency?",
      "option1": "npm install --prod",
      "option2": "npm install -g",
      "option3": "npm install --save-dev",
      "option4": "npm add dev",
      "correct_option": "option3"
    },
    {
      "id": 46,
      "question": "What is the default port used by MongoDB?",
      "option1": "27017",
      "option2": "3000",
      "option3": "8080",
      "option4": "5432",
      "correct_option": "option1"
    },
    {
      "id": 47,
      "question": "Which function is used to protect private routes in Express using JWT?",
      "option1": "jwt.verify()",
      "option2": "jwt.sign()",
      "option3": "jwt.decode()",
      "option4": "jwt.encrypt()",
      "correct_option": "option1"
    },
    {
      "id": 48,
      "question": "What is the purpose of useRef in React?",
      "option1": "Manage routes",
      "option2": "Hold a mutable value without causing re-render",
      "option3": "Track mouse events",
      "option4": "Update component state",
      "correct_option": "option2"
    },
    {
      "id": 49,
      "question": "Which environment file is used in Node.js to store config variables?",
      "option1": ".bashrc",
      "option2": ".npmrc",
      "option3": ".env",
      "option4": "settings.json",
      "correct_option": "option3"
    },
    {
      "id": 50,
      "question": "What does 'npm run build' do in a React app?",
      "option1": "Launches dev server",
      "option2": "Minifies and bundles the code",
      "option3": "Deploys app to Netlify",
      "option4": "Installs dependencies",
      "correct_option": "option2"
    },
    {
      "id": 51,
      "question": "Which CSS property is used for responsive design to make elements fit their container?",
      "option1": "display: block;",
      "option2": "width: auto;",
      "option3": "box-sizing: border-box;",
      "option4": "flex-grow: 1;",
      "correct_option": "option3"
    },
    {
      "id": 52,
      "question": "What is the purpose of the 'defer' attribute in a <script> tag?",
      "option1": "To execute the script immediately",
      "option2": "To delay script execution until HTML parsing is complete",
      "option3": "To load the script asynchronously without blocking HTML parsing",
      "option4": "To make the script optional",
      "correct_option": "option2"
    },
    {
      "id": 53,
      "question": "Which CSS unit is relative to the font-size of the root element?",
      "option1": "em",
      "option2": "rem",
      "option3": "px",
      "option4": "vw",
      "correct_option": "option2"
    },
    {
      "id": 54,
      "question": "What is the purpose of the `useEffect` hook with an empty dependency array `[]`?",
      "option1": "Runs on every render",
      "option2": "Runs only on mount and unmount",
      "option3": "Runs only on component mount",
      "option4": "Runs only when state changes",
      "correct_option": "option3"
    },
    {
      "id": 55,
      "question": "In React, how do you prevent a component from re-rendering if its props or state haven't changed?",
      "option1": "Using `shouldComponentUpdate` (class) or `React.memo` (functional)",
      "option2": "Calling `forceUpdate()`",
      "option3": "Setting `this.state = {}`",
      "option4": "Using `componentWillUpdate`",
      "correct_option": "option1"
    },
    {
      "id": 56,
      "question": "What is JSX in React?",
      "option1": "A JavaScript framework",
      "option2": "A syntax extension for JavaScript that looks like HTML",
      "option3": "A CSS preprocessor",
      "option4": "A type of database",
      "correct_option": "option2"
    },
    {
      "id": 57,
      "question": "Which of these is NOT a valid way to define a functional component in React?",
      "option1": "function MyComponent() { return <></>; }",
      "option2": "const MyComponent = () => <></>;",
      "option3": "class MyComponent extends React.Component { render() { return <></>; } }",
      "option4": "const MyComponent = function() { return <></>; };",
      "correct_option": "option3"
    },
    {
      "id": 58,
      "question": "What is `Virtual DOM` in React?",
      "option1": "A direct representation of the browser's DOM",
      "option2": "A lightweight copy of the actual DOM, used for efficient updates",
      "option3": "A method to bypass the DOM entirely",
      "option4": "A server-side rendering technique",
      "correct_option": "option2"
    },
    {
      "id": 59,
      "question": "Which of the following is true about `const` declarations in JavaScript?",
      "option1": "They can be reassigned.",
      "option2": "They are block-scoped.",
      "option3": "They are hoisted to the top of their scope.",
      "option4": "They must be initialized with a value.",
      "correct_option": "option2"
    },
    {
      "id": 60,
      "question": "What does `Node.js` allow developers to do?",
      "option1": "Run JavaScript only in the browser",
      "option2": "Run JavaScript on the server-side",
      "option3": "Compile C++ code",
      "option4": "Develop mobile applications using Swift",
      "correct_option": "option2"
    },
    {
      "id": 61,
      "question": "Which built-in module in Node.js is used for file system operations?",
      "option1": "http",
      "option2": "path",
      "option3": "fs",
      "option4": "url",
      "correct_option": "option3"
    },
    {
      "id": 62,
      "question": "How do you export a module in Node.js for use in other files?",
      "option1": "import myModule from './myModule';",
      "option2": "export default myModule;",
      "option3": "module.exports = myModule;",
      "option4": "require('./myModule');",
      "correct_option": "option3"
    },
    {
      "id": 63,
      "question": "What is `package.json` in a Node.js project?",
      "option1": "A file used for styling web pages",
      "option2": "A configuration file that contains metadata about the project and its dependencies",
      "option3": "A database schema file",
      "option4": "A script for deploying the application",
      "correct_option": "option2"
    },
    {
      "id": 64,
      "question": "What is the primary role of `nodemon`?",
      "option1": "To debug Node.js applications",
      "option2": "To automatically restart the Node.js server when file changes are detected",
      "option3": "To manage npm packages",
      "option4": "To run unit tests",
      "correct_option": "option2"
    },
    {
      "id": 65,
      "question": "What is a `middleware` in Express.js?",
      "option1": "A function that generates HTML templates",
      "option2": "A function that has access to the request and response objects and the next middleware function",
      "option3": "A database connection pool",
      "option4": "A client-side JavaScript library",
      "correct_option": "option2"
    },
    {
      "id": 66,
      "question": "Which Express method is used to handle all HTTP methods for a given path?",
      "option1": "app.any()",
      "option2": "app.all()",
      "option3": "app.use()",
      "option4": "app.route()",
      "correct_option": "option2"
    },
    {
      "id": 67,
      "question": "How do you send a JSON response from an Express route?",
      "option1": "res.sendJson(data)",
      "option2": "res.json(data)",
      "option3": "res.send(JSON.stringify(data))",
      "option4": "res.jsonp(data)",
      "correct_option": "option2"
    },
    {
      "id": 68,
      "question": "What is a `replica set` in MongoDB?",
      "option1": "A group of independent MongoDB servers",
      "option2": "A set of replicated data across multiple databases",
      "option3": "A group of MongoDB instances that maintain the same data set for high availability and redundancy",
      "option4": "A collection of databases for different applications",
      "correct_option": "option3"
    },
    {
      "id": 69,
      "question": "Which MongoDB operator is used to query for documents where a field's value is greater than a specified value?",
      "option1": "$gt",
      "option2": "$lt",
      "option3": "$gte",
      "option4": "$eq",
      "correct_option": "option1"
    },
    {
      "id": 70,
      "question": "How do you connect to a MongoDB database using Mongoose?",
      "option1": "mongoose.connect('mongodb://localhost/mydb');",
      "option2": "mongoose.openDatabase('mydb');",
      "option3": "db.connect('mydb');",
      "option4": "new MongoConnection('mydb');",
      "correct_option": "option1"
    },
    {
      "id": 71,
      "question": "What is the purpose of `schemas` in Mongoose?",
      "option1": "To define the structure of documents and enforce data validation",
      "option2": "To create new databases",
      "option3": "To establish network connections",
      "option4": "To index data for faster queries",
      "correct_option": "option1"
    },
    {
      "id": 72,
      "question": "Which Mongoose method saves a document to the database?",
      "option1": "insert()",
      "option2": "update()",
      "option3": "save()",
      "option4": "put()",
      "correct_option": "option3"
    },
    {
      "id": 73,
      "question": "What is the `aggregation pipeline` in MongoDB used for?",
      "option1": "To insert multiple documents at once",
      "option2": "To perform advanced data processing operations on collections",
      "option3": "To create new collections",
      "option4": "To backup databases",
      "correct_option": "option2"
    },
    {
      "id": 74,
      "question": "Which React Router hook provides access to the current location object?",
      "option1": "useHistory",
      "option2": "useParams",
      "option3": "useLocation",
      "option4": "useNavigate",
      "correct_option": "option3"
    },
    {
      "id": 75,
      "question": "What is the purpose of the `Link` component in React Router?",
      "option1": "To make external HTTP requests",
      "option2": "To create declarative, accessible navigation links",
      "option3": "To define route paths",
      "option4": "To redirect users programmatically",
      "correct_option": "option2"
    },
    {
      "id": 76,
      "question": "What is the single source of truth in a Redux application?",
      "option1": "The component state",
      "option2": "The Redux store",
      "option3": "The database",
      "option4": "The API endpoint",
      "correct_option": "option2"
    },
    {
      "id": 77,
      "question": "In Redux, what is an `action`?",
      "option1": "A function that changes the state directly",
      "option2": "A plain JavaScript object that describes what happened",
      "option3": "A component property",
      "option4": "A middleware function",
      "correct_option": "option2"
    },
    {
      "id": 78,
      "question": "What is a `reducer` in Redux responsible for?",
      "option1": "Dispatching actions",
      "option2": "Handling asynchronous operations",
      "option3": "Specifying how the application's state changes in response to actions",
      "option4": "Connecting React components to the store",
      "correct_option": "option3"
    },
    {
      "id": 79,
      "question": "Which Redux concept allows for asynchronous side effects?",
      "option1": "Actions",
      "option2": "Reducers",
      "option3": "Middleware (e.g., Redux Thunk, Redux Saga)",
      "option4": "Store",
      "correct_option": "option3"
    },
    {
      "id": 80,
      "question": "What is the typical HTTP status code for a successful request with no content to return?",
      "option1": "200 OK",
      "option2": "201 Created",
      "option3": "204 No Content",
      "option4": "304 Not Modified",
      "correct_option": "option3"
    },
    {
      "id": 81,
      "question": "Which HTTP header is commonly used for authorization with JWT?",
      "option1": "Content-Type",
      "option2": "Accept",
      "option3": "Authorization",
      "option4": "Cache-Control",
      "correct_option": "option3"
    },
    {
      "id": 82,
      "question": "What is a `Cross-Site Scripting (XSS)` attack?",
      "option1": "Injecting malicious SQL code into a database",
      "option2": "Injecting malicious client-side scripts into web pages viewed by other users",
      "option3": "Flooding a server with traffic to make it unavailable",
      "option4": "Gaining unauthorized access to a system by guessing passwords",
      "correct_option": "option2"
    },
    {
      "id": 83,
      "question": "Which npm package is used to hash passwords securely in Node.js?",
      "option1": "crypto",
      "option2": "bcrypt",
      "option3": "md5",
      "option4": "sha256",
      "correct_option": "option2"
    },
    {
      "id": 84,
      "question": "In React, what is a `controlled component`?",
      "option1": "A component whose state is managed by Redux.",
      "option2": "A form element whose value is controlled by React state.",
      "option3": "A component that doesn't have any state.",
      "option4": "A component that renders static content.",
      "correct_option": "option2"
    },
    {
      "id": 85,
      "question": "What is the purpose of `process.env.NODE_ENV` in Node.js?",
      "option1": "To set the Node.js version",
      "option2": "To determine the current environment (e.g., development, production)",
      "option3": "To specify the server port",
      "option4": "To manage environment variables for the current process",
      "correct_option": "option2"
    },
    {
      "id": 86,
      "question": "Which React hook is used for side effects in functional components?",
      "option1": "useState",
      "option2": "useContext",
      "option3": "useEffect",
      "option4": "useReducer",
      "correct_option": "option3"
    },
    {
      "id": 87,
      "question": "What is `prop drilling` in React?",
      "option1": "A method to optimize component rendering.",
      "option2": "Passing data from a parent component down to deeply nested child components through intermediate props.",
      "option3": "A technique for routing in React Router.",
      "option4": "A way to handle form submissions.",
      "correct_option": "option2"
    },
    {
      "id": 88,
      "question": "What is the main advantage of using `Mongoose` over the native MongoDB driver?",
      "option1": "Better performance",
      "option2": "Schema validation and an ODM (Object Data Modeling) layer",
      "option3": "Simpler connection strings",
      "option4": "Supports more data types",
      "correct_option": "option2"
    },
    {
      "id": 89,
      "question": "Which CSS flexbox property controls the alignment of items along the main axis?",
      "option1": "align-items",
      "option2": "justify-content",
      "option3": "flex-direction",
      "option4": "flex-wrap",
      "correct_option": "option2"
    },
    {
      "id": 90,
      "question": "How do you perform a server-side redirect in Express.js?",
      "option1": "res.send('Redirecting...')",
      "option2": "res.redirect('/new-path')",
      "option3": "res.status(302).send()",
      "option4": "res.render('redirect-page')",
      "correct_option": "option2"
    },
    {
      "id": 91,
      "question": "What is `middleware chaining` in Express?",
      "option1": "Linking multiple databases together",
      "option2": "Applying a series of middleware functions to a single route or application",
      "option3": "Connecting multiple Express applications",
      "option4": "Sending multiple responses to a single request",
      "correct_option": "option2"
    },
    {
      "id": 92,
      "question": "Which MongoDB command is used to delete a collection?",
      "option1": "db.collection.remove()",
      "option2": "db.collection.drop()",
      "option3": "db.collection.delete()",
      "option4": "db.collection.clear()",
      "correct_option": "option2"
    },
    {
      "id": 93,
      "question": "What is a `stateless component` in React?",
      "option1": "A component that has a `state` object.",
      "option2": "A component that uses `useState` hook.",
      "option3": "A component that does not manage its own state (typically receives props).",
      "option4": "A component that only renders on the server.",
      "correct_option": "option3"
    },
    {
      "id": 94,
      "question": "In JavaScript, what is the purpose of `JSON.parse()`?",
      "option1": "To convert a JavaScript object to a JSON string.",
      "option2": "To convert a JSON string to a JavaScript object.",
      "option3": "To validate JSON syntax.",
      "option4": "To fetch JSON data from an API.",
      "correct_option": "option2"
    },
    {
      "id": 95,
      "question": "Which tool is commonly used to bundle React applications for production?",
      "option1": "Babel",
      "option2": "ESLint",
      "option3": "Webpack",
      "option4": "Nodemon",
      "correct_option": "option3"
    },
    {
      "id": 96,
      "question": "What does `SSR` stand for in the context of React?",
      "option1": "Single Side Routing",
      "option2": "Server-Side Rendering",
      "option3": "Stateful Server Response",
      "option4": "Secure System Runtime",
      "correct_option": "option2"
    },
    {
      "id": 97,
      "question": "Which CSS property is used to create a responsive grid layout?",
      "option1": "flex",
      "option2": "float",
      "option3": "grid",
      "option4": "position",
      "correct_option": "option3"
    },
    {
      "id": 98,
      "question": "What is a `hoisting` in JavaScript?",
      "option1": "Moving variables to the global scope.",
      "option2": "The process of moving variable and function declarations to the top of their containing scope during compilation.",
      "option3": "A method for asynchronous programming.",
      "option4": "A way to prevent variable re-declaration.",
      "correct_option": "option2"
    },
    {
      "id": 99,
      "question": "What is the purpose of `dotenv` package in Node.js?",
      "option1": "To create a .env file",
      "option2": "To load environment variables from a .env file into `process.env`",
      "option3": "To encrypt environment variables",
      "option4": "To manage database connections",
      "correct_option": "option2"
    },
    {
      "id": 100,
      "question": "What is the `event loop` in Node.js?",
      "option1": "A loop that iterates through all pending database queries.",
      "option2": "A mechanism that handles asynchronous callbacks, I/O operations, and events in a non-blocking way.",
      "option3": "A function that constantly checks for user input.",
      "option4": "A Redux concept for managing state updates.",
      "correct_option": "option2"
    }
  ]
}