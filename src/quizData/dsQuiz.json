{
  "quiz_title": "Data Structures and Algorithms",
  "total_questions": 100,
  "questions": [
    {
      "id": 1,
      "question": "What is the worst-case time complexity for search, insert, and delete operations in a general Binary Search Tree?",
      "option1": "O(n log n)",
      "option2": "O(1)",
      "option3": "O(log n)",
      "option4": "O(n)",
      "correct_option": "option4"
    },
    {
      "id": 2,
      "question": "Which data structure is most appropriate for evaluating postfix expressions?",
      "option1": "Stack",
      "option2": "Queue",
      "option3": "Deque",
      "option4": "Max-Heap",
      "correct_option": "option1"
    },
    {
      "id": 3,
      "question": "What is the time complexity of the enqueue operation in a queue implemented using a linked list?",
      "option1": "O(n)",
      "option2": "O(n^2)",
      "option3": "O(1)",
      "option4": "O(log n)",
      "correct_option": "option3"
    },
    {
      "id": 4,
      "question": "What is the minimum number of nodes in an AVL tree of height 3? (Root at height 0)",
      "option1": "6",
      "option2": "8",
      "option3": "4",
      "option4": "7",
      "correct_option": "option4"
    },
    {
      "id": 5,
      "question": "In a Red-Black Tree, what color must a newly inserted node always be?",
      "option1": "Depends on sibling",
      "option2": "Red",
      "option3": "Parent's color",
      "option4": "Black",
      "correct_option": "option2"
    },
    {
      "id": 6,
      "question": "What is the minimum number of keys a non-root node can have in a B-Tree of order 'm'?",
      "option1": "m/2",
      "option2": "ceil(m/2) - 1",
      "option3": "m",
      "option4": "m - 1",
      "correct_option": "option2"
    },
    {
      "id": 7,
      "question": "Which sorting algorithm has a worst-case time complexity of O(n^2) but an average-case complexity of O(n log n)?",
      "option1": "Merge Sort",
      "option2": "Heap Sort",
      "option3": "Quick Sort",
      "option4": "Bubble Sort",
      "correct_option": "option3"
    },
    {
      "id": 8,
      "question": "Which sorting algorithm is stable and has a time complexity of O(n+k), where k is the range of input?",
      "option1": "Radix Sort",
      "option2": "Bucket Sort",
      "option3": "Counting Sort",
      "option4": "Insertion Sort",
      "correct_option": "option3"
    },
    {
      "id": 9,
      "question": "A traversal that results in a sorted list of elements from a Binary Search Tree is known as what?",
      "option1": "In-order",
      "option2": "Level-order",
      "option3": "Post-order",
      "option4": "Pre-order",
      "correct_option": "option1"
    },
    {
      "id": 10,
      "question": "Which tree traversal method visits the root node last?",
      "option1": "In-order",
      "option2": "Post-order",
      "option3": "Level-order",
      "option4": "Pre-order",
      "correct_option": "option2"
    },
    {
      "id": 11,
      "question": "Given the in-order and pre-order traversal of a tree, which traversal is uniquely determined?",
      "option1": "Zig-zag",
      "option2": "Post-order",
      "option3": "Level-order",
      "option4": "Boundary",
      "correct_option": "option2"
    },
    {
      "id": 12,
      "question": "Which data structure is typically used to implement a priority queue?",
      "option1": "Queue",
      "option2": "Graph",
      "option3": "Stack",
      "option4": "Heap",
      "correct_option": "option4"
    },
    {
      "id": 13,
      "question": "In hashing, what is the term for when two different keys map to the same hash value?",
      "option1": "Collision",
      "option2": "Clustering",
      "option3": "Load Factor",
      "option4": "Overflow",
      "correct_option": "option1"
    },
    {
      "id": 14,
      "question": "What is the primary clustering problem in linear probing caused by?",
      "option1": "Collision resolution path",
      "option2": "Poor hash function",
      "option3": "High load factor",
      "option4": "Small table size",
      "correct_option": "option1"
    },
    {
      "id": 15,
      "question": "Which MST algorithm's greedy approach involves growing a single tree from an arbitrary starting vertex?",
      "option1": "Boruvka's",
      "option2": "Prim's",
      "option3": "Reverse-Delete",
      "option4": "Kruskal's",
      "correct_option": "option2"
    },
    {
      "id": 16,
      "question": "Dijkstra's algorithm may fail to find the correct shortest path in which type of graph?",
      "option1": "Acyclic graphs",
      "option2": "Graphs with cycles",
      "option3": "Graphs with negative weights",
      "option4": "Undirected graphs",
      "correct_option": "option3"
    },
    {
      "id": 17,
      "question": "Which algorithm is used to find the shortest paths between all pairs of vertices in a weighted graph?",
      "option1": "Floyd-Warshall",
      "option2": "Dijkstra's",
      "option3": "Bellman-Ford",
      "option4": "Prim's",
      "correct_option": "option1"
    },
    {
      "id": 18,
      "question": "What is the tightest worst-case time complexity of Floyd-Warshall's all-pairs shortest path algorithm?",
      "option1": "O(V*E)",
      "option2": "O(V^3)",
      "option3": "O(V^2)",
      "option4": "O(E log V)",
      "correct_option": "option2"
    },
    {
      "id": 19,
      "question": "Which data structure is typically used to implement a Breadth-First Search (BFS)?",
      "option1": "Queue",
      "option2": "Heap",
      "option3": "Stack",
      "option4": "Hash Table",
      "correct_option": "option1"
    },
    {
      "id": 20,
      "question": "A topological sort can be generated by reversing the post-order traversal from which algorithm?",
      "option1": "Dijkstra's",
      "option2": "BFS",
      "option3": "DFS",
      "option4": "Prim's",
      "correct_option": "option3"
    },
    {
      "id": 21,
      "question": "In dynamic programming, what is the technique of storing results of subproblems to avoid re-computation?",
      "option1": "Iteration",
      "option2": "Greedy approach",
      "option3": "Memoization",
      "option4": "Recursion",
      "correct_option": "option3"
    },
    {
      "id": 22,
      "question": "Which algorithmic paradigm makes the locally optimal choice at each stage with the hope of finding a global optimum?",
      "option1": "Backtracking",
      "option2": "Greedy Algorithm",
      "option3": "Divide and Conquer",
      "option4": "Dynamic Programming",
      "correct_option": "option2"
    },
    {
      "id": 23,
      "question": "The traveling salesman problem is a classic example of which problem class, suggesting no efficient solution exists?",
      "option1": "NP-Hard",
      "option2": "P",
      "option3": "ZPP",
      "option4": "BPP",
      "correct_option": "option1"
    },
    {
      "id": 24,
      "question": "What is the time complexity of the binary search algorithm?",
      "option1": "O(n log n)",
      "option2": "O(n)",
      "option3": "O(log n)",
      "option4": "O(1)",
      "correct_option": "option3"
    },
    {
      "id": 25,
      "question": "Merge Sort is a classic example of which algorithmic paradigm?",
      "option1": "Backtracking",
      "option2": "Divide and Conquer",
      "option3": "Greedy",
      "option4": "Dynamic Programming",
      "correct_option": "option2"
    },
    {
      "id": 26,
      "question": "What is the worst-case space complexity of Merge Sort?",
      "option1": "O(log n)",
      "option2": "O(n)",
      "option3": "O(1)",
      "option4": "O(n log n)",
      "correct_option": "option2"
    },
    {
      "id": 27,
      "question": "A data structure where elements can be inserted or deleted at both ends is called a what?",
      "option1": "Stack",
      "option2": "Queue",
      "option3": "Heap",
      "option4": "Deque",
      "correct_option": "option4"
    },
    {
      "id": 28,
      "question": "What is the tightest time complexity for deleting an arbitrary element from a binary heap?",
      "option1": "O(n log n)",
      "option2": "O(n)",
      "option3": "O(log n)",
      "option4": "O(1)",
      "correct_option": "option3"
    },
    {
      "id": 29,
      "question": "The 'Tower of Hanoi' puzzle is a classic problem that can be solved efficiently using what?",
      "option1": "Recursion",
      "option2": "Greedy method",
      "option3": "Sorting",
      "option4": "Iteration",
      "correct_option": "option1"
    },
    {
      "id": 30,
      "question": "In a max-heap, the parent node must be what compared to its children?",
      "option1": "Not equal to",
      "option2": "Less than",
      "option3": "Equal to",
      "option4": "Greater or equal to",
      "correct_option": "option4"
    },
    {
      "id": 31,
      "question": "A skip list achieves O(log n) search time on average by using what probabilistic technique?",
      "option1": "Random sampling",
      "option2": "Hashing",
      "option3": "Random pivots",
      "option4": "Randomized levels",
      "correct_option": "option4"
    },
    {
      "id": 32,
      "question": "Which of these is a 'stable' sorting algorithm?",
      "option1": "Heap Sort",
      "option2": "Quick Sort",
      "option3": "Merge Sort",
      "option4": "Selection Sort",
      "correct_option": "option3"
    },
    {
      "id": 33,
      "question": "A back edge detected during a DFS traversal of a directed graph indicates the presence of a what?",
      "option1": "Cycle",
      "option2": "Source vertex",
      "option3": "Forward edge",
      "option4": "Tree edge",
      "correct_option": "option1"
    },
    {
      "id": 34,
      "question": "What data structure is used to manage function calls and their local variables in most programming languages?",
      "option1": "Call Stack",
      "option2": "Heap",
      "option3": "Hash Table",
      "option4": "Queue",
      "correct_option": "option1"
    },
    {
      "id": 35,
      "question": "The optimal substructure property is a required characteristic for a problem to be solvable by which paradigm?",
      "option1": "Backtracking",
      "option2": "Greedy",
      "option3": "Dynamic Programming",
      "option4": "Brute force",
      "correct_option": "option3"
    },
    {
      "id": 36,
      "question": "A circular queue is typically implemented using what data structure?",
      "option1": "Heap",
      "option2": "Linked List",
      "option3": "Stack",
      "option4": "Array",
      "correct_option": "option4"
    },
    {
      "id": 37,
      "question": "What is the maximum allowed absolute difference in height between the left and right subtrees of any node in an AVL tree?",
      "option1": "0",
      "option2": "2",
      "option3": "log n",
      "option4": "1",
      "correct_option": "option4"
    },
    {
      "id": 38,
      "question": "Which searching algorithm requires the data to be sorted beforehand?",
      "option1": "Linear Search",
      "option2": "Depth-First Search",
      "option3": "Breadth-First Search",
      "option4": "Binary Search",
      "correct_option": "option4"
    },
    {
      "id": 39,
      "question": "The number of edges in a complete graph with 'n' vertices is what?",
      "option1": "n",
      "option2": "n * (n+1) / 2",
      "option3": "n-1",
      "option4": "n * (n-1) / 2",
      "correct_option": "option4"
    },
    {
      "id": 40,
      "question": "Which optimization is crucial for achieving the near-constant amortized time complexity of disjoint set operations?",
      "option1": "Lazy propagation",
      "option2": "Adjacency matrix",
      "option3": "Union by rank/size",
      "option4": "Memoization",
      "correct_option": "option3"
    },
    {
      "id": 41,
      "question": "Which operation in a disjoint set data structure recursively sets the parent of each node in a path to the root?",
      "option1": "Path Compression",
      "option2": "Find",
      "option3": "Union by Rank",
      "option4": "MakeSet",
      "correct_option": "option1"
    },
    {
      "id": 42,
      "question": "The master theorem is used to determine the time complexity of which type of algorithms?",
      "option1": "Randomized",
      "option2": "Greedy",
      "option3": "Recursive",
      "option4": "Iterative",
      "correct_option": "option3"
    },
    {
      "id": 43,
      "question": "The activity selection problem is a classic example of which algorithmic approach?",
      "option1": "Dynamic Programming",
      "option2": "Backtracking",
      "option3": "Divide and Conquer",
      "option4": "Greedy Method",
      "correct_option": "option4"
    },
    {
      "id": 44,
      "question": "What is the key operation in a Fenwick tree (BIT) that allows for efficient prefix sum calculations?",
      "option1": "Heapify",
      "option2": "Isolating last set bit",
      "option3": "Tree rotation",
      "option4": "Path compression",
      "correct_option": "option2"
    },
    {
      "id": 45,
      "question": "What does it mean if a sorting algorithm is 'adaptive'?",
      "option1": "It uses extra memory",
      "option2": "It works on any data type",
      "option3": "It's always in-place",
      "option4": "It's faster for nearly sorted data",
      "correct_option": "option4"
    },
    {
      "id": 46,
      "question": "Which data structure would be most efficient for implementing a dictionary or phone book?",
      "option1": "Array",
      "option2": "Hash Table",
      "option3": "Queue",
      "option4": "Stack",
      "correct_option": "option2"
    },
    {
      "id": 47,
      "question": "A graph where edges have a direction is called a what?",
      "option1": "Complete Graph",
      "option2": "Directed Graph",
      "option3": "Undirected Graph",
      "option4": "Weighted Graph",
      "correct_option": "option2"
    },
    {
      "id": 48,
      "question": "For a hash table using open addressing, the load factor alpha must always be what?",
      "option1": "Unrestricted",
      "option2": "alpha = 1",
      "option3": "alpha > 1",
      "option4": "alpha < 1",
      "correct_option": "option4"
    },
    {
      "id": 49,
      "question": "The process of re-arranging items in a hash table to a larger table when the load factor gets too high is called what?",
      "option1": "Resizing",
      "option2": "Rebalancing",
      "option3": "Reloading",
      "option4": "Rehashing",
      "correct_option": "option4"
    },
    {
      "id": 50,
      "question": "Bellman-Ford's algorithm can detect what condition in a graph, which Dijkstra's cannot?",
      "option1": "Self-loops",
      "option2": "Disconnected components",
      "option3": "Negative weight cycles",
      "option4": "Positive weight cycles",
      "correct_option": "option3"
    },
    {
      "id": 51,
      "question": "What is the Big O notation for an algorithm that takes constant time?",
      "option1": "O(n^2)",
      "option2": "O(1)",
      "option3": "O(log n)",
      "option4": "O(n)",
      "correct_option": "option2"
    },
    {
      "id": 52,
      "question": "The time complexity of Bubble Sort in the best-case scenario (already sorted array) is what?",
      "option1": "O(n)",
      "option2": "O(n^2)",
      "option3": "O(1)",
      "option4": "O(n log n)",
      "correct_option": "option1"
    },
    {
      "id": 53,
      "question": "What is the worst-case time complexity for searching a key in a trie, where 'm' is the key length?",
      "option1": "O(n)",
      "option2": "O(m)",
      "option3": "O(log m)",
      "option4": "O(1)",
      "correct_option": "option2"
    },
    {
      "id": 54,
      "question": "A complete binary tree is a binary tree where every level, except possibly the last, is completely filled, and all nodes are as far to the what?",
      "option1": "Top",
      "option2": "Center",
      "option3": "Right",
      "option4": "Left",
      "correct_option": "option4"
    },
    {
      "id": 55,
      "question": "An LR rotation in an AVL tree is a composite of which two simpler rotations?",
      "option1": "Left then Right",
      "option2": "Two Lefts",
      "option3": "Two Rights",
      "option4": "Right then Left",
      "correct_option": "option1"
    },
    {
      "id": 56,
      "question": "Which algorithm finds articulation points (or cut vertices) in a connected graph?",
      "option1": "Dijkstra's",
      "option2": "Tarjan's",
      "option3": "Kruskal's",
      "option4": "Prim's",
      "correct_option": "option2"
    },
    {
      "id": 57,
      "question": "A 'deque' is a data structure that is a generalization of what?",
      "option1": "Both Stack and Queue",
      "option2": "Stack",
      "option3": "Heap",
      "option4": "Queue",
      "correct_option": "option1"
    },
    {
      "id": 58,
      "question": "The greedy approach for the fractional knapsack problem works because of what property?",
      "option1": "Greedy-choice property",
      "option2": "Optimal substructure",
      "option3": "Memoization",
      "option4": "Overlapping subproblems",
      "correct_option": "option1"
    },
    {
      "id": 59,
      "question": "The 0/1 Knapsack problem, where items must be taken whole, is a classic example of what?",
      "option1": "Dynamic Programming",
      "option2": "Randomized Algorithm",
      "option3": "Greedy",
      "option4": "Sorting",
      "correct_option": "option1"
    },
    {
      "id": 60,
      "question": "What is the amortized time complexity of an operation in a splay tree?",
      "option1": "O(n)",
      "option2": "O(log n)",
      "option3": "O(n log n)",
      "option4": "O(1)",
      "correct_option": "option2"
    },
    {
      "id": 61,
      "question": "Which of these data structures is not a linear data structure?",
      "option1": "Array",
      "option2": "Queue",
      "option3": "Stack",
      "option4": "Tree",
      "correct_option": "option4"
    },
    {
      "id": 62,
      "question": "In a linked list, what does the 'head' pointer point to?",
      "option1": "First node",
      "option2": "Null",
      "option3": "Last node",
      "option4": "Middle node",
      "correct_option": "option1"
    },
    {
      "id": 63,
      "question": "A sparse matrix is a matrix in which most of the elements are what?",
      "option1": "Zero",
      "option2": "Negative",
      "option3": "One",
      "option4": "Positive",
      "correct_option": "option1"
    },
    {
      "id": 64,
      "question": "The height of a binary tree with N nodes is at least what?",
      "option1": "N",
      "option2": "log2(N)",
      "option3": "floor(log2(N))",
      "option4": "N-1",
      "correct_option": "option3"
    },
    {
      "id": 65,
      "question": "Which notation is used to represent the lower bound of an algorithm's running time?",
      "option1": "Big Theta",
      "option2": "Big O",
      "option3": "Big Omega",
      "option4": "Little O",
      "correct_option": "option3"
    },
    {
      "id": 66,
      "question": "A binary tree in which the height of the left and right subtrees of every node differ by at most one is a(n) what?",
      "option1": "Balanced tree",
      "option2": "Complete tree",
      "option3": "Perfect tree",
      "option4": "Full tree",
      "correct_option": "option1"
    },
    {
      "id": 67,
      "question": "The process of arranging data in a specific order is known as what?",
      "option1": "Merging",
      "option2": "Sorting",
      "option3": "Searching",
      "option4": "Traversing",
      "correct_option": "option2"
    },
    {
      "id": 68,
      "question": "In the context of complexity, what does 'amortized analysis' refer to?",
      "option1": "Best-case analysis",
      "option2": "Probabilistic analysis",
      "option3": "Worst-case analysis",
      "option4": "Average-case over a sequence",
      "correct_option": "option4"
    },
    {
      "id": 69,
      "question": "What is a 'pointer' in data structures?",
      "option1": "An index",
      "option2": "A memory address",
      "option3": "A keyword",
      "option4": "A data value",
      "correct_option": "option2"
    },
    {
      "id": 70,
      "question": "The pre-computation step of the KMP algorithm builds what structure to skip unnecessary comparisons?",
      "option1": "LPS array",
      "option2": "State machine",
      "option3": "Suffix tree",
      "option4": "Adjacency matrix",
      "correct_option": "option1"
    },
    {
      "id": 71,
      "question": "A memory allocation that happens at compile time is known as what?",
      "option1": "Heap allocation",
      "option2": "Dynamic allocation",
      "option3": "Static allocation",
      "option4": "Lazy allocation",
      "correct_option": "option3"
    },
    {
      "id": 72,
      "question": "Which garbage collection technique can suffer from cyclic reference issues?",
      "option1": "Copying Collector",
      "option2": "Reference Counting",
      "option3": "Generational Collector",
      "option4": "Mark and Sweep",
      "correct_option": "option2"
    },
    {
      "id": 73,
      "question": "What data structure does a file system directory structure most resemble?",
      "option1": "Queue",
      "option2": "Tree",
      "option3": "Graph",
      "option4": "Array",
      "correct_option": "option2"
    },
    {
      "id": 74,
      "question": "What is the primary drawback of using an array to implement a queue?",
      "option1": "Slow access time",
      "option2": "Fixed size",
      "option3": "Memory wastage",
      "option4": "Complex implementation",
      "correct_option": "option2"
    },
    {
      "id": 75,
      "question": "An ADT specifies 'what' to do, while a data structure specifies 'how' to do it. This concept is known as what?",
      "option1": "Abstraction",
      "option2": "Polymorphism",
      "option3": "Encapsulation",
      "option4": "Inheritance",
      "correct_option": "option1"
    },
    {
      "id": 76,
      "question": "A graph that has no cycles is called a what?",
      "option1": "Complete Graph",
      "option2": "Acyclic Graph",
      "option3": "Bipartite Graph",
      "option4": "Weighted Graph",
      "correct_option": "option2"
    },
    {
      "id": 77,
      "question": "A Bloom filter can produce which type of error when testing for element membership?",
      "option1": "Neither",
      "option2": "Both",
      "option3": "False negatives",
      "option4": "False positives",
      "correct_option": "option4"
    },
    {
      "id": 78,
      "question": "What is the key property of a 'bipartite graph'?",
      "option1": "Vertices can be split into two sets",
      "option2": "All edges are bidirectional",
      "option3": "It has two components",
      "option4": "It has no cycles",
      "correct_option": "option1"
    },
    {
      "id": 79,
      "question": "What is the time complexity of the standard dynamic programming solution for the Longest Common Subsequence problem?",
      "option1": "O(m log n)",
      "option2": "O(m*n)",
      "option3": "O(n log m)",
      "option4": "O(m+n)",
      "correct_option": "option2"
    },
    {
      "id": 80,
      "question": "The efficiency of an algorithm is most commonly measured by its what?",
      "option1": "Ease of use",
      "option2": "Code length",
      "option3": "Number of functions",
      "option4": "Time and space complexity",
      "correct_option": "option4"
    },
    {
      "id": 81,
      "question": "What operation removes an item from the front of a queue?",
      "option1": "Dequeue",
      "option2": "Enqueue",
      "option3": "Pop",
      "option4": "Push",
      "correct_option": "option1"
    },
    {
      "id": 82,
      "question": "After an insertion, a Red-Black tree may violate its properties. What operation is performed to restore them?",
      "option1": "Path compression",
      "option2": "Rehashing",
      "option3": "Balancing",
      "option4": "Recoloring and rotation",
      "correct_option": "option4"
    },
    {
      "id": 83,
      "question": "What is the term for the number of edges incident to a vertex in an undirected graph?",
      "option1": "Path",
      "option2": "Degree",
      "option3": "Level",
      "option4": "Cycle",
      "correct_option": "option2"
    },
    {
      "id": 84,
      "question": "Which data structure would be most suitable for modeling a network of roads between cities?",
      "option1": "Graph",
      "option2": "Tree",
      "option3": "Heap",
      "option4": "Array",
      "correct_option": "option1"
    },
    {
      "id": 85,
      "question": "What is the primary trade-off when choosing between a doubly linked list and a singly linked list?",
      "option1": "Speed vs Simplicity",
      "option2": "Memory vs Traversal",
      "option3": "Storage vs Access",
      "option4": "Complexity vs Speed",
      "correct_option": "option2"
    },
    {
      "id": 86,
      "question": "Radix sort works by sorting elements based on their what?",
      "option1": "Individual digits",
      "option2": "Comparison with others",
      "option3": "Total value",
      "option4": "Position in array",
      "correct_option": "option1"
    },
    {
      "id": 87,
      "question": "A Monte Carlo algorithm is a type of randomized algorithm that always runs in polynomial time but may produce what?",
      "option1": "An incorrect answer",
      "option2": "An optimal answer",
      "option3": "No answer",
      "option4": "A delayed answer",
      "correct_option": "option1"
    },
    {
      "id": 88,
      "question": "Which type of expression does not require parentheses to specify the order of operations?",
      "option1": "Both Prefix and Postfix",
      "option2": "Postfix",
      "option3": "Infix",
      "option4": "Prefix",
      "correct_option": "option1"
    },
    {
      "id": 89,
      "question": "In a threaded binary tree, null pointers are replaced with pointers to what?",
      "option1": "Parent node",
      "option2": "Sibling nodes",
      "option3": "In-order predecessor/successor",
      "option4": "Root node",
      "correct_option": "option3"
    },
    {
      "id": 90,
      "question": "A decision problem that is both in NP and NP-Hard is called what?",
      "option1": "Co-NP",
      "option2": "P",
      "option3": "NP-Complete",
      "option4": "PSPACE",
      "correct_option": "option3"
    },
    {
      "id": 91,
      "question": "What is the process of converting a high-level data representation into a specific implementation?",
      "option1": "Abstraction",
      "option2": "Refinement",
      "option3": "Polymorphism",
      "option4": "Encapsulation",
      "correct_option": "option2"
    },
    {
      "id": 92,
      "question": "What is the height of a well-constructed segment tree built on an array of N elements?",
      "option1": "O(N)",
      "option2": "O(log N)",
      "option3": "O(N log N)",
      "option4": "O(1)",
      "correct_option": "option2"
    },
    {
      "id": 93,
      "question": "What is a major disadvantage of using recursion?",
      "option1": "Hard to write",
      "option2": "Not powerful enough",
      "option3": "Stack overflow risk",
      "option4": "Slow execution",
      "correct_option": "option3"
    },
    {
      "id": 94,
      "question": "Which of the following is an example of an 'external' sorting algorithm?",
      "option1": "Polyphase Merge Sort",
      "option2": "Insertion Sort",
      "option3": "Quick Sort",
      "option4": "Bubble Sort",
      "correct_option": "option1"
    },
    {
      "id": 95,
      "question": "What is the name for the function that transforms keys into table addresses in a hash table?",
      "option1": "Map function",
      "option2": "Index function",
      "option3": "Key function",
      "option4": "Hash function",
      "correct_option": "option4"
    },
    {
      "id": 96,
      "question": "An approximation algorithm has an approximation ratio of 'c'. What does this guarantee?",
      "option1": "Solution is within factor c",
      "option2": "Runs c times faster",
      "option3": "Uses c times less memory",
      "option4": "Solution is c% optimal",
      "correct_option": "option1"
    },
    {
      "id": 97,
      "question": "Which data structure represents a hierarchical structure?",
      "option1": "Array",
      "option2": "Linked List",
      "option3": "Tree",
      "option4": "Graph",
      "correct_option": "option3"
    },
    {
      "id": 98,
      "question": "The time factor when determining the efficiency of an algorithm is measured by what?",
      "option1": "Counting microseconds",
      "option2": "Counting code lines",
      "option3": "Counting key operations",
      "option4": "Counting CPU cycles",
      "correct_option": "option3"
    },
    {
      "id": 99,
      "question": "Which data structure is most suitable for finding the k-th smallest element in a set?",
      "option1": "Max-heap",
      "option2": "Queue",
      "option3": "Hash Table",
      "option4": "Order Statistic Tree",
      "correct_option": "option4"
    },
    {
      "id": 100,
      "question": "A linked list where the last node points back to the first node is called a what?",
      "option1": "Doubly Linked List",
      "option2": "Singly Linked List",
      "option3": "Header Linked List",
      "option4": "Circular Linked List",
      "correct_option": "option4"
    }
  ]
}