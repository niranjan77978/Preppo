{
  "quiz_title": "MERN Stack Mastery",
  "total_questions": 100,
  "questions": [
    {
      "id": 1,
      "question": "Which HTML tag is used to define the primary navigation for a document?",
      "option1": "<header>",
      "option2": "<ul>",
      "option3": "<nav>",
      "option4": "<menu>",
      "correct_option": "option3"
    },
    {
      "id": 2,
      "question": "Which HTML attribute prevents a user from submitting a form if the input is empty?",
      "option1": "required",
      "option2": "placeholder",
      "option3": "disabled",
      "option4": "validate",
      "correct_option": "option1"
    },
    {
      "id": 3,
      "question": "What is the correct HTML element for linking an external stylesheet?",
      "option1": "<style>",
      "option2": "<link>",
      "option3": "<script>",
      "option4": "<css>",
      "correct_option": "option2"
    },
    {
      "id": 4,
      "question": "Which CSS selector has the highest specificity?",
      "option1": "Class selector (.card)",
      "option2": "Type selector (div)",
      "option3": "ID selector (#main)",
      "option4": "Universal selector (*)",
      "correct_option": "option3"
    },
    {
      "id": 5,
      "question": "Which CSS property controls the stacking order of positioned elements?",
      "option1": "display",
      "option2": "position",
      "option3": "z-index",
      "option4": "layer",
      "correct_option": "option3"
    },
    {
      "id": 6,
      "question": "Which JavaScript keyword declares a block-scoped variable that can be reassigned?",
      "option1": "let",
      "option2": "var",
      "option3": "const",
      "option4": "static",
      "correct_option": "option1"
    },
    {
      "id": 7,
      "question": "What JavaScript feature provides syntactic sugar for handling promises in a more synchronous-looking way?",
      "option1": "Callbacks",
      "option2": "async/await",
      "option3": ".then() chaining",
      "option4": "Event Listeners",
      "correct_option": "option2"
    },
    {
      "id": 8,
      "question": "What is the result of `...new Set([1, 2, 2, 3])` in JavaScript?",
      "option1": "[1, 2, 3]",
      "option2": "{1, 2, 3}",
      "option3": "[1, 2, 2, 3]",
      "option4": "1, 2, 3",
      "correct_option": "option4"
    },
    {
      "id": 9,
      "question": "Which React lifecycle method is invoked right after a component and its children have been rendered to the DOM?",
      "option1": "render",
      "option2": "constructor",
      "option3": "componentDidMount",
      "option4": "componentDidUpdate",
      "correct_option": "option3"
    },
    {
      "id": 10,
      "question": "What is the return value of the `useState` hook in a React functional component?",
      "option1": "A state object",
      "option2": "A setter function",
      "option3": "The state value",
      "option4": "A state-setter pair",
      "correct_option": "option4"
    },
    {
      "id": 11,
      "question": "Which React hook is used to memoize a function definition, preventing unnecessary re-renders of child components?",
      "option1": "useMemo",
      "option2": "useCallback",
      "option3": "useEffect",
      "option4": "useRef",
      "correct_option": "option2"
    },
    {
      "id": 12,
      "question": "Which Express method is used to create a new resource via an API endpoint?",
      "option1": "app.get()",
      "option2": "app.put()",
      "option3": "app.delete()",
      "option4": "app.post()",
      "correct_option": "option4"
    },
    {
      "id": 13,
      "question": "In an Express middleware function `(req, res, next)`, what is the purpose of `next`?",
      "option1": "End the response",
      "option2": "Send an error",
      "option3": "Pass control to next",
      "option4": "Get request body",
      "correct_option": "option3"
    },
    {
      "id": 14,
      "question": "What is the built-in Express middleware for parsing incoming JSON payloads?",
      "option1": "express.json()",
      "option2": "express.text()",
      "option3": "express.urlencoded()",
      "option4": "express.static()",
      "correct_option": "option1"
    },
    {
      "id": 15,
      "question": "In a Mongoose schema, which property ensures that a field must have a value before saving?",
      "option1": "unique: true",
      "option2": "required: true",
      "option3": "default: null",
      "option4": "validate: exists",
      "correct_option": "option2"
    },
    {
      "id": 16,
      "question": "How do you create a new Mongoose model from a schema?",
      "option1": "mongoose.compile(name, schema)",
      "option2": "mongoose.build(name, schema)",
      "option3": "mongoose.model(name, schema)",
      "option4": "mongoose.create(name, schema)",
      "correct_option": "option3"
    },
    {
      "id": 17,
      "question": "What Mongoose method replaces a document's path with the actual document(s) from other collections?",
      "option1": "aggregate()",
      "option2": "populate()",
      "option3": "lookup()",
      "option4": "join()",
      "correct_option": "option2"
    },
    {
      "id": 18,
      "question": "What is the name of the official Node.js driver for MongoDB?",
      "option1": "mongoose",
      "option2": "mongodb",
      "option3": "mongoclient",
      "option4": "mongojs",
      "correct_option": "option2"
    },
    {
      "id": 19,
      "question": "Which popular Node.js library is used to hash passwords before storing them?",
      "option1": "jwt",
      "option2": "bcrypt",
      "option3": "crypto",
      "option4": "passport",
      "correct_option": "option2"
    },
    {
      "id": 20,
      "question": "In React Router, what component is used to render the matched child route of a parent route?",
      "option1": "<Link>",
      "option2": "<Navigate>",
      "option3": "<Outlet>",
      "option4": "<Switch>",
      "correct_option": "option3"
    },
    {
      "id": 21,
      "question": "Which React hook is used to consume a value from a Context object?",
      "option1": "useReducer",
      "option2": "useEffect",
      "option3": "useContext",
      "option4": "useState",
      "correct_option": "option3"
    },
    {
      "id": 22,
      "question": "For a Redux reducer to be 'pure', it must not perform what?",
      "option1": "Return a new state",
      "option2": "Calculate data",
      "option3": "Mutate state",
      "option4": "Read arguments",
      "correct_option": "option3"
    },
    {
      "id": 23,
      "question": "Which HTTP status code signifies that a request was successful and a resource was created?",
      "option1": "404 Not Found",
      "option2": "200 OK",
      "option3": "201 Created",
      "option4": "500 Server Error",
      "correct_option": "option3"
    },
    {
      "id": 24,
      "question": "Which command creates a `package.json` file in a new Node.js project?",
      "option1": "node create",
      "option2": "npm start",
      "option3": "npm init",
      "option4": "git init",
      "correct_option": "option3"
    },
    {
      "id": 25,
      "question": "MongoDB is a type of NoSQL database known as a what?",
      "option1": "Document store",
      "option2": "Columnar store",
      "option3": "Key-value store",
      "option4": "Graph database",
      "correct_option": "option1"
    },
    {
      "id": 26,
      "question": "Which MongoDB shell command switches to a different database (creating it if it doesn't exist)?",
      "option1": "db.switch()",
      "option2": "show dbs",
      "option3": "connect db",
      "option4": "use [db_name]",
      "correct_option": "option4"
    },
    {
      "id": 27,
      "question": "Which Mongoose query method is used to find a single document by its `_id` field?",
      "option1": "findOne()",
      "option2": "find()",
      "option3": "findById()",
      "option4": "get()",
      "correct_option": "option3"
    },
    {
      "id": 28,
      "question": "Which HTTP method is idempotent and used for replacing an entire resource?",
      "option1": "POST",
      "option2": "PATCH",
      "option3": "PUT",
      "option4": "GET",
      "correct_option": "option3"
    },
    {
      "id": 29,
      "question": "What is the final part of a three-part JSON Web Token (JWT) called?",
      "option1": "Header",
      "option2": "Signature",
      "option3": "Payload",
      "option4": "Algorithm",
      "correct_option": "option2"
    },
    {
      "id": 30,
      "question": "What should be passed as the second argument to `useState` to set the initial state only once?",
      "option1": "A value",
      "option2": "A function",
      "option3": "An array",
      "option4": "An object",
      "correct_option": "option2"
    },
    {
      "id": 31,
      "question": "Which Node.js core module provides utilities for working with file and directory paths?",
      "option1": "fs",
      "option2": "http",
      "option3": "path",
      "option4": "url",
      "correct_option": "option3"
    },
    {
      "id": 32,
      "question": "Which HTTP method is typically used to apply partial modifications to a resource?",
      "option1": "UPDATE",
      "option2": "POST",
      "option3": "PATCH",
      "option4": "PUT",
      "correct_option": "option3"
    },
    {
      "id": 33,
      "question": "What is the purpose of the `express.urlencoded()` middleware in Express?",
      "option1": "Parse JSON bodies",
      "option2": "Parse URL-encoded bodies",
      "option3": "Serve static files",
      "option4": "Enable CORS",
      "correct_option": "option2"
    },
    {
      "id": 34,
      "question": "Which React hook is a more powerful alternative to `useState` for managing complex state logic?",
      "option1": "useEffect",
      "option2": "useContext",
      "option3": "useCallback",
      "option4": "useReducer",
      "correct_option": "option4"
    },
    {
      "id": 35,
      "question": "In an Express route defined as `/users/:id`, how would you access the `id`?",
      "option1": "req.query.id",
      "option2": "req.params.id",
      "option3": "req.body.id",
      "option4": "req.id",
      "correct_option": "option2"
    },
    {
      "id": 36,
      "question": "In React Router, what component declaratively changes the current location?",
      "option1": "<Link>",
      "option2": "<Route>",
      "option3": "<Navigate>",
      "option4": "<Outlet>",
      "correct_option": "option3"
    },
    {
      "id": 37,
      "question": "What is the primary purpose of the `key` prop when rendering a list of elements in React?",
      "option1": "CSS styling",
      "option2": "Unique identification",
      "option3": "Event handling",
      "option4": "Data binding",
      "correct_option": "option2"
    },
    {
      "id": 38,
      "question": "What does the 'R' in the MERN stack stand for?",
      "option1": "Router",
      "option2": "Relational",
      "option3": "React",
      "option4": "Redux",
      "correct_option": "option3"
    },
    {
      "id": 39,
      "question": "In MongoDB, what is a document analogous to in SQL databases?",
      "option1": "Table",
      "option2": "Row",
      "option3": "Column",
      "option4": "Database",
      "correct_option": "option2"
    },
    {
      "id": 40,
      "question": "What is returned from a `useEffect` hook to perform cleanup, such as unsubscribing from an event?",
      "option1": "A promise",
      "option2": "A cleanup function",
      "option3": "The state value",
      "option4": "A boolean",
      "correct_option": "option2"
    },
    {
      "id": 41,
      "question": "What is the primary role of a bundler like Webpack in a MERN application?",
      "option1": "Run the server",
      "option2": "Manage packages",
      "option3": "Bundle modules",
      "option4": "Test APIs",
      "correct_option": "option3"
    },
    {
      "id": 42,
      "question": "Which Redux middleware is designed for managing more complex asynchronous flows using generator functions?",
      "option1": "Redux Promise",
      "option2": "Redux Saga",
      "option3": "Redux Logger",
      "option4": "Redux Thunk",
      "correct_option": "option2"
    },
    {
      "id": 43,
      "question": "What is the purpose of the `Access-Control-Allow-Origin` HTTP header?",
      "option1": "Specify allowed methods",
      "option2": "Specify allowed origins",
      "option3": "Specify content type",
      "option4": "Specify credentials",
      "correct_option": "option2"
    },
    {
      "id": 44,
      "question": "Which Express middleware is used to serve files like images, CSS, and JavaScript from a directory?",
      "option1": "express.static()",
      "option2": "express.json()",
      "option3": "express.router()",
      "option4": "express.files()",
      "correct_option": "option1"
    },
    {
      "id": 45,
      "question": "What does the `-g` flag do in an `npm install` command?",
      "option1": "Installs globally",
      "option2": "Installs for development",
      "option3": "Generates a lock file",
      "option4": "Forces reinstall",
      "correct_option": "option1"
    },
    {
      "id": 46,
      "question": "What is the default port for a `create-react-app` development server?",
      "option1": "8080",
      "option2": "3000",
      "option3": "5000",
      "option4": "27017",
      "correct_option": "option2"
    },
    {
      "id": 47,
      "question": "Which function in the `jsonwebtoken` library is used to create a new token?",
      "option1": "verify()",
      "option2": "decode()",
      "option3": "sign()",
      "option4": "create()",
      "correct_option": "option3"
    },
    {
      "id": 48,
      "question": "What is a primary use case for the `useRef` hook in React?",
      "option1": "Storing component state",
      "option2": "Accessing DOM nodes",
      "option3": "Triggering side effects",
      "option4": "Memoizing functions",
      "correct_option": "option2"
    },
    {
      "id": 49,
      "question": "Which Node.js package is commonly used to load environment variables from a `.env` file?",
      "option1": "dotenv",
      "option2": "env-cmd",
      "option3": "cross-env",
      "option4": "config",
      "correct_option": "option1"
    },
    {
      "id": 50,
      "question": "In a `create-react-app` project, which tool transpiles modern JavaScript to be compatible with older browsers?",
      "option1": "Webpack",
      "option2": "ESLint",
      "option3": "Babel",
      "option4": "Jest",
      "correct_option": "option3"
    },
    {
      "id": 51,
      "question": "In CSS, what is the 'box model' composed of?",
      "option1": "Width, Height, Display",
      "option2": "Content, Padding, Border, Margin",
      "option3": "Flex, Grid, Block",
      "option4": "Position, Left, Top",
      "correct_option": "option2"
    },
    {
      "id": 52,
      "question": "What is the purpose of the `async` attribute in a `<script>` tag?",
      "option1": "To load and execute the script asynchronously",
      "option2": "To execute the script after the page has loaded",
      "option3": "To defer script execution",
      "option4": "To load the script from a different domain",
      "correct_option": "option1"
    },
    {
      "id": 53,
      "question": "Which CSS unit is relative to the viewport's width?",
      "option1": "%",
      "option2": "em",
      "option3": "rem",
      "option4": "vw",
      "correct_option": "option4"
    },
    {
      "id": 54,
      "question": "In a `useEffect` hook, what does the return function (cleanup) do?",
      "option1": "Runs on every render",
      "option2": "Runs before the component unmounts",
      "option3": "Runs only on mount",
      "option4": "Runs when state changes",
      "correct_option": "option2"
    },
    {
      "id": 55,
      "question": "What is a Higher-Order Component (HOC) in React?",
      "option1": "A component that renders other components",
      "option2": "A function that takes a component and returns a new component",
      "option3": "A built-in React component",
      "option4": "A component with complex state",
      "correct_option": "option2"
    },
    {
      "id": 56,
      "question": "What must all sibling JSX elements be wrapped in?",
      "option1": "A single parent element",
      "option2": "A div",
      "option3": "A span",
      "option4": "A component",
      "correct_option": "option1"
    },
    {
      "id": 57,
      "question": "In React, how do you pass data from a parent component to a child component?",
      "option1": "State",
      "option2": "Props",
      "option3": "Context",
      "option4": "Refs",
      "correct_option": "option2"
    },
    {
      "id": 58,
      "question": "What is the process React uses to compare the Virtual DOM with the real DOM to find differences?",
      "option1": "Reconciliation",
      "option2": "Rendering",
      "option3": "Mounting",
      "option4": "Diffing",
      "correct_option": "option1"
    },
    {
      "id": 59,
      "question": "What does the JavaScript `...` spread operator do for objects?",
      "option1": "Combines them",
      "option2": "Selects properties",
      "option3": "Deletes properties",
      "option4": "Copies properties",
      "correct_option": "option4"
    },
    {
      "id": 60,
      "question": "Which of these is a core characteristic of Node.js's I/O model?",
      "option1": "Synchronous",
      "option2": "Multi-threaded",
      "option3": "Non-blocking",
      "option4": "Blocking",
      "correct_option": "option3"
    },
    {
      "id": 61,
      "question": "What does the `fs.readFile` method in Node.js do?",
      "option1": "Reads a file synchronously",
      "option2": "Reads a file asynchronously",
      "option3": "Writes to a file",
      "option4": "Deletes a file",
      "correct_option": "option2"
    },
    {
      "id": 62,
      "question": "How do you import an ES module in Node.js?",
      "option1": "include 'module'",
      "option2": "require('module')",
      "option3": "import module from 'module'",
      "option4": "load('module')",
      "correct_option": "option3"
    },
    {
      "id": 63,
      "question": "What is the purpose of the `node_modules` directory?",
      "option1": "To store project source code",
      "option2": "To store downloaded package dependencies",
      "option3": "To store global packages",
      "option4": "To store environment variables",
      "correct_option": "option2"
    },
    {
      "id": 64,
      "question": "What is the primary role of `npm`?",
      "option1": "A code editor",
      "option2": "A JavaScript runtime",
      "option3": "A package manager",
      "option4": "A web server",
      "correct_option": "option3"
    },
    {
      "id": 65,
      "question": "Which type of middleware is executed after all other route handlers for a specific path?",
      "option1": "Application-level",
      "option2": "Router-level",
      "option3": "Error-handling",
      "option4": "Built-in",
      "correct_option": "option3"
    },
    {
      "id": 66,
      "question": "Which Express object represents the HTTP response that an app sends when it gets a request?",
      "option1": "req",
      "option2": "app",
      "option3": "res",
      "option4": "next",
      "correct_option": "option3"
    },
    {
      "id": 67,
      "question": "How do you set a custom HTTP status code on a response in Express?",
      "option1": "res.setStatus(400)",
      "option2": "res.code(400)",
      "option3": "res.status(400)",
      "option4": "res.http(400)",
      "correct_option": "option3"
    },
    {
      "id": 68,
      "question": "What MongoDB feature provides redundancy and high availability through data duplication?",
      "option1": "GridFS",
      "option2": "Aggregation",
      "option3": "Sharding",
      "option4": "Replica Set",
      "correct_option": "option4"
    },
    {
      "id": 69,
      "question": "Which MongoDB operator matches documents that contain an array field with at least one element that matches all specified query criteria?",
      "option1": "$in",
      "option2": "$elemMatch",
      "option3": "$all",
      "option4": "$size",
      "correct_option": "option2"
    },
    {
      "id": 70,
      "question": "What is the primary purpose of Mongoose middleware (pre/post hooks)?",
      "option1": "To define schema",
      "option2": "To connect to DB",
      "option3": "To execute logic on model actions",
      "option4": "To validate data types",
      "correct_option": "option3"
    },
    {
      "id": 71,
      "question": "What does an ODM like Mongoose provide over a native database driver?",
      "option1": "Faster connections",
      "option2": "Schema and validation",
      "option3": "Direct query access",
      "option4": "Lower memory usage",
      "correct_option": "option2"
    },
    {
      "id": 72,
      "question": "Which Mongoose method creates and saves a document in one step?",
      "option1": "new Model()",
      "option2": "Model.create()",
      "option3": "Model.save()",
      "option4": "Model.insert()",
      "correct_option": "option2"
    },
    {
      "id": 73,
      "question": "Which aggregation pipeline stage in MongoDB is used to perform a join with another collection?",
      "option1": "$match",
      "option2": "$group",
      "option3": "$lookup",
      "option4": "$project",
      "correct_option": "option3"
    },
    {
      "id": 74,
      "question": "Which React Router hook is used to access dynamic segments from the URL?",
      "option1": "useLocation",
      "option2": "useParams",
      "option3": "useNavigate",
      "option4": "useRoute",
      "correct_option": "option2"
    },
    {
      "id": 75,
      "question": "What is the primary difference between a `<Link>` and an `<a>` tag?",
      "option1": "Styling",
      "option2": "Event handling",
      "option3": "Page reload behavior",
      "option4": "Accessibility",
      "correct_option": "option3"
    },
    {
      "id": 76,
      "question": "What is the only way to update the state in a Redux application?",
      "option1": "Dispatching an action",
      "option2": "Calling a reducer",
      "option3": "Using middleware",
      "option4": "Modifying the store",
      "correct_option": "option1"
    },
    {
      "id": 77,
      "question": "What is the recommended way to structure an 'action' object in Redux?",
      "option1": "{ type, data }",
      "option2": "{ action, payload }",
      "option3": "{ type, payload }",
      "option4": "{ event, data }",
      "correct_option": "option3"
    },
    {
      "id": 78,
      "question": "What must a Redux reducer return if it does not recognize an action?",
      "option1": "null",
      "option2": "undefined",
      "option3": "The current state",
      "option4": "An empty object",
      "correct_option": "option3"
    },
    {
      "id": 79,
      "question": "What is a 'thunk' in the context of Redux?",
      "option1": "A state slice",
      "option2": "A special reducer",
      "option3": "A synchronous action",
      "option4": "A function returned by an action creator",
      "correct_option": "option4"
    },
    {
      "id": 80,
      "question": "What HTTP status code is used to indicate that the server understands the request but refuses to authorize it?",
      "option1": "400 Bad Request",
      "option2": "401 Unauthorized",
      "option3": "403 Forbidden",
      "option4": "405 Method Not Allowed",
      "correct_option": "option3"
    },
    {
      "id": 81,
      "question": "In an `Authorization: Bearer <token>` header, what does 'Bearer' signify?",
      "option1": "Token type",
      "option2": "Token issuer",
      "option3": "Encryption scheme",
      "option4": "Token expiration",
      "correct_option": "option1"
    },
    {
      "id": 82,
      "question": "What is a Cross-Site Request Forgery (CSRF) attack?",
      "option1": "Injecting scripts into a website",
      "option2": "Tricking a user into submitting a malicious request",
      "option3": "Stealing user cookies",
      "option4": "Crashing a server",
      "correct_option": "option2"
    },
    {
      "id": 83,
      "question": "What is the purpose of 'salting' a password before hashing?",
      "option1": "To make it shorter",
      "option2": "To prevent rainbow table attacks",
      "option3": "To encrypt the password",
      "option4": "To speed up hashing",
      "correct_option": "option2"
    },
    {
      "id": 84,
      "question": "In React, what is an 'uncontrolled component'?",
      "option1": "A component controlled by Redux",
      "option2": "A component that has no state",
      "option3": "A form element where the DOM handles the state",
      "option4": "A component with no props",
      "correct_option": "option3"
    },
    {
      "id": 85,
      "question": "Which Node.js global object provides access to environment variables?",
      "option1": "global",
      "option2": "process.env",
      "option3": "window.env",
      "option4": "module.exports",
      "correct_option": "option2"
    },
    {
      "id": 86,
      "question": "Which hook is used to perform side effects like data fetching in a React component?",
      "option1": "useReducer",
      "option2": "useState",
      "option3": "useEffect",
      "option4": "useContext",
      "correct_option": "option3"
    },
    {
      "id": 87,
      "question": "Which React feature is the modern solution to avoid 'prop drilling'?",
      "option1": "State lifting",
      "option2": "Refs",
      "option3": "Context API",
      "option4": "HOCs",
      "correct_option": "option3"
    },
    {
      "id": 88,
      "question": "What does ODM stand for in the context of Mongoose?",
      "option1": "Object Document Mapper",
      "option2": "Object Data Model",
      "option3": "Object-Oriented Database Model",
      "option4": "Online Data Manager",
      "correct_option": "option1"
    },
    {
      "id": 89,
      "question": "Which CSS flexbox property controls how flex items are aligned along the cross axis?",
      "option1": "justify-content",
      "option2": "flex-wrap",
      "option3": "align-items",
      "option4": "flex-direction",
      "correct_option": "option3"
    },
    {
      "id": 90,
      "question": "Which HTTP status code is most appropriate for a permanent redirect?",
      "option1": "301",
      "option2": "302",
      "option3": "307",
      "option4": "308",
      "correct_option": "option1"
    },
    {
      "id": 91,
      "question": "In Express, where are middleware functions typically placed to be executed for every request?",
      "option1": "Before route definitions",
      "option2": "After route definitions",
      "option3": "In a separate file",
      "option4": "Inside route handlers",
      "correct_option": "option1"
    },
    {
      "id": 92,
      "question": "Which MongoDB command is used to remove all documents from a collection but not the collection itself?",
      "option1": "db.collection.drop()",
      "option2": "db.collection.deleteMany({})",
      "option3": "db.collection.remove()",
      "option4": "db.collection.clear()",
      "correct_option": "option2"
    },
    {
      "id": 93,
      "question": "A React component that only depends on its props and renders the same output for the same props is a what?",
      "option1": "Pure component",
      "option2": "Stateful component",
      "option3": "Class component",
      "option4": "Smart component",
      "correct_option": "option1"
    },
    {
      "id": 94,
      "question": "In JavaScript, what is the purpose of `JSON.stringify()`?",
      "option1": "To validate JSON",
      "option2": "To parse a JSON string",
      "option3": "To convert an object to a JSON string",
      "option4": "To make an API call",
      "correct_option": "option3"
    },
    {
      "id": 95,
      "question": "What is the primary function of Babel in a modern JavaScript toolchain?",
      "option1": "To bundle code",
      "option2": "To transpile code",
      "option3": "To lint code",
      "option4": "To run tests",
      "correct_option": "option2"
    },
    {
      "id": 96,
      "question": "What is a primary benefit of Server-Side Rendering (SSR) for a React app?",
      "option1": "Faster initial load and SEO",
      "option2": "Simpler state management",
      "option3": "Reduced server costs",
      "option4": "Easier development",
      "correct_option": "option1"
    },
    {
      "id": 97,
      "question": "Which CSS Grid property is used to define the number and size of columns?",
      "option1": "grid-template-rows",
      "option2": "grid-gap",
      "option3": "grid-template-columns",
      "option4": "grid-auto-flow",
      "correct_option": "option3"
    },
    {
      "id": 98,
      "question": "What JavaScript feature allows a function to remember and access its lexical scope even when executed outside that scope?",
      "option1": "Hoisting",
      "option2": "Closure",
      "option3": "Prototype",
      "option4": "Callback",
      "correct_option": "option2"
    },
    {
      "id": 99,
      "question": "Which property in `package.json` specifies the entry point of a Node.js application?",
      "option1": "start",
      "option2": "main",
      "option3": "entry",
      "option4": "scripts",
      "correct_option": "option2"
    },
    {
      "id": 100,
      "question": "Which phase of the Node.js event loop executes `setImmediate()` callbacks?",
      "option1": "Timers",
      "option2": "Poll",
      "option3": "Check",
      "option4": "Close Callbacks",
      "correct_option": "option3"
    }
  ]
}