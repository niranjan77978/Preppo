{
  "quiz_title": "Object-Oriented Programming (OOP)",
  "total_questions": 100,
  "questions": [
    {
      "id": 1,
      "question": "Which of the following is NOT considered a fundamental pillar of OOP?",
      "option1": "Inheritance",
      "option2": "Recursion",
      "option3": "Encapsulation",
      "option4": "Polymorphism",
      "correct_option": "option2"
    },
    {
      "id": 2,
      "question": "Which OOP principle bundles data and the methods that operate on that data into a single unit?",
      "option1": "Inheritance",
      "option2": "Polymorphism",
      "option3": "Abstraction",
      "option4": "Encapsulation",
      "correct_option": "option4"
    },
    {
      "id": 3,
      "question": "What is the term for a blueprint or template used to create objects?",
      "option1": "Object",
      "option2": "Method",
      "option3": "Class",
      "option4": "Instance",
      "correct_option": "option3"
    },
    {
      "id": 4,
      "question": "What is a concrete realization of a class, possessing its own state and behavior?",
      "option1": "Object",
      "option2": "Constructor",
      "option3": "Blueprint",
      "option4": "Interface",
      "correct_option": "option1"
    },
    {
      "id": 5,
      "question": "A 'is-a' relationship between two classes is best represented by which OOP concept?",
      "option1": "Composition",
      "option2": "Aggregation",
      "option3": "Inheritance",
      "option4": "Association",
      "correct_option": "option3"
    },
    {
      "id": 6,
      "question": "What is the practice of defining multiple methods in the same class with the same name but different signatures?",
      "option1": "Overriding",
      "option2": "Overloading",
      "option3": "Inheritance",
      "option4": "Abstraction",
      "correct_option": "option2"
    },
    {
      "id": 7,
      "question": "Method overloading is an example of which type of polymorphism?",
      "option1": "Runtime",
      "option2": "Dynamic",
      "option3": "Coercion",
      "option4": "Compile-time",
      "correct_option": "option4"
    },
    {
      "id": 8,
      "question": "What is it called when a subclass provides a specific implementation for a method that is already defined in its superclass?",
      "option1": "Overloading",
      "option2": "Overriding",
      "option3": "Hiding",
      "option4": "Finalizing",
      "correct_option": "option2"
    },
    {
      "id": 9,
      "question": "In C++, which operator is used to define the scope of a function outside its class definition?",
      "option1": "->",
      "option2": ".",
      "option3": "::",
      "option4": ":",
      "correct_option": "option3"
    },
    {
      "id": 10,
      "question": "What type of class cannot be instantiated and is designed to be subclassed?",
      "option1": "Final Class",
      "option2": "Static Class",
      "option3": "Abstract Class",
      "option4": "Inner Class",
      "correct_option": "option3"
    },
    {
      "id": 11,
      "question": "An abstract class constructor is called from where?",
      "option1": "Never called",
      "option2": "Directly in code",
      "option3": "Subclass constructor",
      "option4": "Static methods only",
      "correct_option": "option3"
    },
    {
      "id": 12,
      "question": "In Java, what construct defines a contract of methods that a class must implement, supporting a form of multiple inheritance?",
      "option1": "Interface",
      "option2": "Abstract Class",
      "option3": "Enum",
      "option4": "Package",
      "correct_option": "option1"
    },
    {
      "id": 13,
      "question": "Unlike an abstract class, an interface in Java cannot have what?",
      "option1": "Methods",
      "option2": "Default methods",
      "option3": "Constants",
      "option4": "Instance fields",
      "correct_option": "option4"
    },
    {
      "id": 14,
      "question": "The 'has-a' relationship, where one object owns another and manages its lifecycle, is known as what?",
      "option1": "Inheritance",
      "option2": "Association",
      "option3": "Composition",
      "option4": "Aggregation",
      "correct_option": "option3"
    },
    {
      "id": 15,
      "question": "When an object's lifecycle is independent of its container, what is the 'has-a' relationship called?",
      "option1": "Composition",
      "option2": "Aggregation",
      "option3": "Inheritance",
      "option4": "Polymorphism",
      "correct_option": "option2"
    },
    {
      "id": 16,
      "question": "The mechanism of restricting access to certain components of an object is called what?",
      "option1": "Abstraction",
      "option2": "Data Hiding",
      "option3": "Polymorphism",
      "option4": "Inheritance",
      "correct_option": "option2"
    },
    {
      "id": 17,
      "question": "Which keyword provides access to members of the immediate parent class?",
      "option1": "this",
      "option2": "self",
      "option3": "super",
      "option4": "parent",
      "correct_option": "option3"
    },
    {
      "id": 18,
      "question": "In C++, what does a 'virtual' destructor ensure?",
      "option1": "Faster destruction",
      "option2": "Cannot be called",
      "option3": "Correct derived cleanup",
      "option4": "Prevents destruction",
      "correct_option": "option3"
    },
    {
      "id": 19,
      "question": "The mechanism where the method to be called is determined at runtime instead of compile time is known as what?",
      "option1": "Static Binding",
      "option2": "Method Overloading",
      "option3": "Dynamic Dispatch",
      "option4": "Early Binding",
      "correct_option": "option3"
    },
    {
      "id": 20,
      "question": "What keyword is used within a method to get a reference to the current object instance?",
      "option1": "super",
      "option2": "this",
      "option3": "new",
      "option4": "instanceof",
      "correct_option": "option2"
    },
    {
      "id": 21,
      "question": "What is a special method used to initialize a newly created object?",
      "option1": "Initializer",
      "option2": "Function",
      "option3": "Constructor",
      "option4": "Destructor",
      "correct_option": "option3"
    },
    {
      "id": 22,
      "question": "What concept allows a class to have multiple constructors with different parameter lists?",
      "option1": "Constructor Chaining",
      "option2": "Constructor Overriding",
      "option3": "Constructor Overloading",
      "option4": "Default Constructor",
      "correct_option": "option3"
    },
    {
      "id": 23,
      "question": "In C++, what special member function is called when an object goes out of scope or is explicitly deleted?",
      "option1": "Constructor",
      "option2": "Finalizer",
      "option3": "Destructor",
      "option4": "Deleter",
      "correct_option": "option3"
    },
    {
      "id": 24,
      "question": "A relationship where one class uses another, but neither owns the other, is called what?",
      "option1": "Composition",
      "option2": "Aggregation",
      "option3": "Inheritance",
      "option4": "Association",
      "correct_option": "option4"
    },
    {
      "id": 25,
      "question": "What is the term for a superclass in an inheritance hierarchy?",
      "option1": "Child Class",
      "option2": "Base Class",
      "option3": "Friend Class",
      "option4": "Leaf Class",
      "correct_option": "option2"
    },
    {
      "id": 26,
      "question": "Which access modifier makes a member accessible only within its own class?",
      "option1": "public",
      "option2": "private",
      "option3": "protected",
      "option4": "default",
      "correct_option": "option2"
    },
    {
      "id": 27,
      "question": "In Java, what is the default access level when no modifier is specified?",
      "option1": "public",
      "option2": "private",
      "option3": "protected",
      "option4": "package-private",
      "correct_option": "option4"
    },
    {
      "id": 28,
      "question": "A class member that belongs to the class itself, rather than to any specific instance, is declared as what?",
      "option1": "final",
      "option2": "static",
      "option3": "abstract",
      "option4": "volatile",
      "correct_option": "option2"
    },
    {
      "id": 29,
      "question": "Converting a superclass reference to a subclass type, which requires an explicit cast, is called what?",
      "option1": "Casting",
      "option2": "Downcasting",
      "option3": "Upcasting",
      "option4": "Autoboxing",
      "correct_option": "option2"
    },
    {
      "id": 30,
      "question": "What is the term for treating a subclass object as an instance of its superclass?",
      "option1": "Upcasting",
      "option2": "Downcasting",
      "option3": "Instantiating",
      "option4": "Polymorphism",
      "correct_option": "option1"
    },
    {
      "id": 31,
      "question": "In C++, a class whose members are public by default is a what?",
      "option1": "class",
      "option2": "struct",
      "option3": "union",
      "option4": "template",
      "correct_option": "option2"
    },
    {
      "id": 32,
      "question": "A class defined inside another class that has access to the outer class's members is called a(n) what?",
      "option1": "Static Class",
      "option2": "Local Class",
      "option3": "Friend Class",
      "option4": "Inner Class",
      "correct_option": "option4"
    },
    {
      "id": 33,
      "question": "What term describes the degree of interdependence between software modules?",
      "option1": "Cohesion",
      "option2": "Coupling",
      "option3": "Encapsulation",
      "option4": "Inheritance",
      "correct_option": "option2"
    },
    {
      "id": 34,
      "question": "What term measures how strongly related and focused the responsibilities of a single module are?",
      "option1": "Coupling",
      "option2": "Abstraction",
      "option3": "Cohesion",
      "option4": "Modularity",
      "correct_option": "option3"
    },
    {
      "id": 35,
      "question": "A good software design should aim for which combination of coupling and cohesion?",
      "option1": "High Coupling, Low Cohesion",
      "option2": "Low Coupling, High Cohesion",
      "option3": "High Coupling, High Cohesion",
      "option4": "Low Coupling, Low Cohesion",
      "correct_option": "option2"
    },
    {
      "id": 36,
      "question": "In C++, a method that can access private members of another class is declared as a what?",
      "option1": "virtual function",
      "option2": "static function",
      "option3": "friend function",
      "option4": "template function",
      "correct_option": "option3"
    },
    {
      "id": 37,
      "question": "Can a static method in Java be overridden in a subclass?",
      "option1": "Yes, always",
      "option2": "No, it gets hidden",
      "option3": "Yes, with @Override",
      "option4": "Only if public",
      "correct_option": "option2"
    },
    {
      "id": 38,
      "question": "The principle of hiding implementation details from the user is known as what?",
      "option1": "Polymorphism",
      "option2": "Inheritance",
      "option3": "Abstraction",
      "option4": "Recursion",
      "correct_option": "option3"
    },
    {
      "id": 39,
      "question": "Which SOLID principle states that objects of a superclass should be replaceable with objects of its subclasses without affecting correctness?",
      "option1": "Open/Closed",
      "option2": "Single Responsibility",
      "option3": "Liskov Substitution",
      "option4": "Dependency Inversion",
      "correct_option": "option3"
    },
    {
      "id": 40,
      "question": "Which design pattern is often criticized for violating the Single Responsibility Principle and being difficult to unit test?",
      "option1": "Factory",
      "option2": "Observer",
      "option3": "Singleton",
      "option4": "Strategy",
      "correct_option": "option3"
    },
    {
      "id": 41,
      "question": "Which SOLID principle suggests that software entities should be open for extension but closed for modification?",
      "option1": "Single Responsibility",
      "option2": "Liskov Substitution",
      "option3": "Open/Closed",
      "option4": "Interface Segregation",
      "correct_option": "option3"
    },
    {
      "id": 42,
      "question": "A C++ class containing at least one pure virtual function is known as a(n) what?",
      "option1": "Template Class",
      "option2": "Friend Class",
      "option3": "Abstract Class",
      "option4": "Concrete Class",
      "correct_option": "option3"
    },
    {
      "id": 43,
      "question": "The ambiguity that can arise when a class inherits from two superclasses that have a common base class is called what?",
      "option1": "Multiple Inheritance",
      "option2": "Hybrid Inheritance",
      "option3": "Diamond Problem",
      "option4": "Deadly Embrace",
      "correct_option": "option3"
    },
    {
      "id": 44,
      "question": "When an overriding method's return type is a subtype of the overridden method's return type, it's known as what?",
      "option1": "Contravariance",
      "option2": "Invariance",
      "option3": "Covariance",
      "option4": "Variance",
      "correct_option": "option3"
    },
    {
      "id": 45,
      "question": "Which pattern provides an object its dependencies from an external source rather than having it create them itself?",
      "option1": "Singleton",
      "option2": "Factory",
      "option3": "Dependency Injection",
      "option4": "Builder",
      "correct_option": "option3"
    },
    {
      "id": 46,
      "question": "Which design pattern defers the instantiation of a class to its subclasses?",
      "option1": "Abstract Factory",
      "option2": "Builder",
      "option3": "Prototype",
      "option4": "Factory Method",
      "correct_option": "option4"
    },
    {
      "id": 47,
      "question": "The principle 'depend on abstractions, not on concretions' is the core idea of which SOLID principle?",
      "option1": "Open/Closed",
      "option2": "Liskov Substitution",
      "option3": "Dependency Inversion",
      "option4": "Single Responsibility",
      "correct_option": "option3"
    },
    {
      "id": 48,
      "question": "Which design pattern captures and externalizes an object's internal state so it can be restored later?",
      "option1": "State",
      "option2": "Command",
      "option3": "Memento",
      "option4": "Proxy",
      "correct_option": "option3"
    },
    {
      "id": 49,
      "question": "Which behavioral pattern allows an object to notify other objects about changes in its state?",
      "option1": "Observer",
      "option2": "Mediator",
      "option3": "Visitor",
      "option4": "Chain of Responsibility",
      "correct_option": "option1"
    },
    {
      "id": 50,
      "question": "The ability of a program to inspect and modify its own structure and behavior at runtime is called what?",
      "option1": "Introspection",
      "option2": "Reflection",
      "option3": "Metaprogramming",
      "option4": "Serialization",
      "correct_option": "option2"
    },
    {
      "id": 51,
      "question": "When an object forwards a request to another object to handle it, this is an example of what?",
      "option1": "Inheritance",
      "option2": "Delegation",
      "option3": "Polymorphism",
      "option4": "Recursion",
      "correct_option": "option2"
    },
    {
      "id": 52,
      "question": "The ability of an object to take on many forms is a core concept of which OOP pillar?",
      "option1": "Polymorphism",
      "option2": "Inheritance",
      "option3": "Encapsulation",
      "option4": "Abstraction",
      "correct_option": "option1"
    },
    {
      "id": 53,
      "question": "A class that provides methods that can be inherited by other classes, without being a parent in the 'is-a' sense, is a what?",
      "option1": "Mixin",
      "option2": "Helper Class",
      "option3": "Utility Class",
      "option4": "Trait",
      "correct_option": "option1"
    },
    {
      "id": 54,
      "question": "A statement that checks for a condition that should always be true at a certain point in the code is a(n) what?",
      "option1": "Exception",
      "option2": "Error",
      "option3": "Assertion",
      "option4": "Breakpoint",
      "correct_option": "option3"
    },
    {
      "id": 55,
      "question": "What is an object called if its state cannot be modified after it is created?",
      "option1": "Static Object",
      "option2": "Final Object",
      "option3": "Immutable Object",
      "option4": "Constant Object",
      "correct_option": "option3"
    },
    {
      "id": 56,
      "question": "What is a major benefit of using immutable objects in a multithreaded environment?",
      "option1": "Faster access",
      "option2": "Lower memory use",
      "option3": "Inherent thread safety",
      "option4": "Simpler creation",
      "correct_option": "option3"
    },
    {
      "id": 57,
      "question": "In Java generics, what does `List<? extends Number>` signify?",
      "option1": "Invariance",
      "option2": "Contravariance",
      "option3": "Covariance",
      "option4": "Unbounded",
      "correct_option": "option3"
    },
    {
      "id": 58,
      "question": "In Java generics, what does `List<? super Integer>` signify?",
      "option1": "Contravariance",
      "option2": "Covariance",
      "option3": "Invariance",
      "option4": "Bounded",
      "correct_option": "option1"
    },
    {
      "id": 59,
      "question": "Which SOLID principle advocates that a class should have only one reason to change?",
      "option1": "Open/Closed",
      "option2": "Single Responsibility",
      "option3": "Liskov Substitution",
      "option4": "Interface Segregation",
      "correct_option": "option2"
    },
    {
      "id": 60,
      "question": "Which SOLID principle suggests that it's better to have many client-specific interfaces than one general-purpose interface?",
      "option1": "Liskov Substitution",
      "option2": "Open/Closed",
      "option3": "Dependency Inversion",
      "option4": "Interface Segregation",
      "correct_option": "option4"
    },
    {
      "id": 61,
      "question": "The 'D' in SOLID principles stands for what?",
      "option1": "Data Hiding",
      "option2": "Delegation",
      "option3": "Dependency Inversion",
      "option4": "Decoupling",
      "correct_option": "option3"
    },
    {
      "id": 62,
      "question": "Which design pattern allows an object's behavior to change when its internal state changes?",
      "option1": "State",
      "option2": "Strategy",
      "option3": "Observer",
      "option4": "Memento",
      "correct_option": "option1"
    },
    {
      "id": 63,
      "question": "Which pattern converts the interface of a class into another interface that a client expects?",
      "option1": "Proxy",
      "option2": "Decorator",
      "option3": "Facade",
      "option4": "Adapter",
      "correct_option": "option4"
    },
    {
      "id": 64,
      "question": "Which pattern attaches additional responsibilities to an object dynamically?",
      "option1": "Decorator",
      "option2": "Adapter",
      "option3": "Proxy",
      "option4": "Composite",
      "correct_option": "option1"
    },
    {
      "id": 65,
      "question": "Which design pattern provides a simplified interface to a complex subsystem?",
      "option1": "Bridge",
      "option2": "Facade",
      "option3": "Adapter",
      "option4": "Flyweight",
      "correct_option": "option2"
    },
    {
      "id": 66,
      "question": "The concept that objects should be as independent of each other as possible is known as what?",
      "option1": "High Cohesion",
      "option2": "Loose Coupling",
      "option3": "Tight Coupling",
      "option4": "Low Cohesion",
      "correct_option": "option2"
    },
    {
      "id": 67,
      "question": "A function whose return value is the same for the same arguments and has no observable side effects is called a what?",
      "option1": "Void function",
      "option2": "Static function",
      "option3": "Impure function",
      "option4": "Pure function",
      "correct_option": "option4"
    },
    {
      "id": 68,
      "question": "Using preconditions, postconditions, and invariants to ensure software correctness is known as what?",
      "option1": "Unit Testing",
      "option2": "Type Checking",
      "option3": "Design by Contract",
      "option4": "Defensive Programming",
      "correct_option": "option3"
    },
    {
      "id": 69,
      "question": "In Java, an interface defined within another class or interface is by default what?",
      "option1": "public and abstract",
      "option2": "private and final",
      "option3": "public and static",
      "option4": "protected and abstract",
      "correct_option": "option3"
    },
    {
      "id": 70,
      "question": "What is a consequence of type erasure in Java generics?",
      "option1": "Better runtime performance",
      "option2": "Cannot create new T()",
      "option3": "Allows primitive types",
      "option4": "Enables reified types",
      "correct_option": "option2"
    },
    {
      "id": 71,
      "question": "What is an empty interface used to signal a special property to the JVM or a framework?",
      "option1": "Functional Interface",
      "option2": "Marker Interface",
      "option3": "Utility Interface",
      "option4": "Remote Interface",
      "correct_option": "option2"
    },
    {
      "id": 72,
      "question": "Which Java keyword indicates that a field should not be included in the object's persistent state?",
      "option1": "transient",
      "option2": "volatile",
      "option3": "static",
      "option4": "final",
      "correct_option": "option1"
    },
    {
      "id": 73,
      "question": "Which keyword ensures that modifications to a variable are always visible to other threads?",
      "option1": "synchronized",
      "option2": "final",
      "option3": "static",
      "option4": "volatile",
      "correct_option": "option4"
    },
    {
      "id": 74,
      "question": "Which pattern creates a 'skeleton' of an algorithm in a method, letting subclasses redefine certain steps without changing the algorithm's structure?",
      "option1": "Strategy",
      "option2": "Observer",
      "option3": "Template Method",
      "option4": "Factory Method",
      "correct_option": "option3"
    },
    {
      "id": 75,
      "question": "Which pattern turns a request into a stand-alone object that contains all information about the request?",
      "option1": "Command",
      "option2": "State",
      "option3": "Memento",
      "option4": "Visitor",
      "correct_option": "option1"
    },
    {
      "id": 76,
      "question": "In C++, what kind of class allows its private members to be accessed by another specified class or function?",
      "option1": "Parent class",
      "option2": "Friend class",
      "option3": "Subclass",
      "option4": "Static class",
      "correct_option": "option2"
    },
    {
      "id": 77,
      "question": "In Java, exceptions that are subclasses of `RuntimeException` or `Error` are known as what?",
      "option1": "Checked",
      "option2": "Unchecked",
      "option3": "Handled",
      "option4": "Declared",
      "correct_option": "option2"
    },
    {
      "id": 78,
      "question": "In Java, an exception that is checked by the compiler at compile-time is called a what?",
      "option1": "Error",
      "option2": "Unchecked Exception",
      "option3": "RuntimeException",
      "option4": "Checked Exception",
      "correct_option": "option4"
    },
    {
      "id": 79,
      "question": "Which block in a try-catch-finally statement is guaranteed to execute regardless of whether an exception occurs?",
      "option1": "try",
      "option2": "catch",
      "option3": "finally",
      "option4": "throws",
      "correct_option": "option3"
    },
    {
      "id": 80,
      "question": "What is the process of converting an object's state into a format that can be stored or transmitted?",
      "option1": "Compilation",
      "option2": "Instantiation",
      "option3": "Serialization",
      "option4": "Reflection",
      "correct_option": "option3"
    },
    {
      "id": 81,
      "question": "Recreating an object from its serialized byte stream is known as what?",
      "option1": "Cloning",
      "option2": "Deserialization",
      "option3": "Casting",
      "option4": "Initialization",
      "correct_option": "option2"
    },
    {
      "id": 82,
      "question": "What is the primary benefit of using generic types in a language like Java or C#?",
      "option1": "Faster runtime speed",
      "option2": "Compile-time type safety",
      "option3": "Smaller memory footprint",
      "option4": "Simpler syntax",
      "correct_option": "option2"
    },
    {
      "id": 83,
      "question": "What is the term for a generic type that can be one of several possible types, often specified with bounds?",
      "option1": "Variant",
      "option2": "Wildcard",
      "option3": "Union Type",
      "option4": "Anonymous Type",
      "correct_option": "option2"
    },
    {
      "id": 84,
      "question": "Which Java wildcard is used for a generic parameter when you only need to read values from a structure (producer)?",
      "option1": "?",
      "option2": "? extends T",
      "option3": "? super T",
      "option4": "<T>",
      "correct_option": "option2"
    },
    {
      "id": 85,
      "question": "Which Java wildcard is used for a generic parameter when you only need to write values into a structure (consumer)?",
      "option1": "? extends T",
      "option2": "?",
      "option3": "<T>",
      "option4": "? super T",
      "correct_option": "option4"
    },
    {
      "id": 86,
      "question": "A collection whose contents cannot be altered after creation is known as what?",
      "option1": "Dynamic",
      "option2": "Immutable",
      "option3": "Synchronized",
      "option4": "Lazy",
      "correct_option": "option2"
    },
    {
      "id": 87,
      "question": "Which creational pattern separates object construction from its representation, often using step-by-step methods?",
      "option1": "Builder",
      "option2": "Prototype",
      "option3": "Singleton",
      "option4": "Factory Method",
      "correct_option": "option1"
    },
    {
      "id": 88,
      "question": "Which behavioral pattern provides a way to access elements of a collection sequentially without exposing its underlying structure?",
      "option1": "Visitor",
      "option2": "Iterator",
      "option3": "Flyweight",
      "option4": "Chain of Responsibility",
      "correct_option": "option2"
    },
    {
      "id": 89,
      "question": "Which structural pattern provides a placeholder for another object to control access to it?",
      "option1": "Adapter",
      "option2": "Decorator",
      "option3": "Bridge",
      "option4": "Proxy",
      "correct_option": "option4"
    },
    {
      "id": 90,
      "question": "What design principle allows a framework to call into user-written code, reversing the typical flow of control?",
      "option1": "Delegation",
      "option2": "Encapsulation",
      "option3": "Inversion of Control",
      "option4": "Abstraction",
      "correct_option": "option3"
    },
    {
      "id": 91,
      "question": "Dependency Injection is a common implementation of which broader design principle?",
      "option1": "KISS",
      "option2": "DRY",
      "option3": "YAGNI",
      "option4": "Inversion of Control",
      "correct_option": "option4"
    },
    {
      "id": 92,
      "question": "A class that only contains abstract methods and cannot be instantiated is effectively a(n) what?",
      "option1": "Interface",
      "option2": "Static Class",
      "option3": "Final Class",
      "option4": "Singleton",
      "correct_option": "option1"
    },
    {
      "id": 93,
      "question": "Creating a new object and recursively copying the fields of the original object is known as what?",
      "option1": "Shallow Copy",
      "option2": "Cloning",
      "option3": "Deep Copy",
      "option4": "Reference Copy",
      "correct_option": "option3"
    },
    {
      "id": 94,
      "question": "Which pattern allows adding new operations to an object structure without modifying the objects themselves?",
      "option1": "Visitor",
      "option2": "Command",
      "option3": "Strategy",
      "option4": "Observer",
      "correct_option": "option1"
    },
    {
      "id": 95,
      "question": "The resolution of method calls at compile-time is known as what?",
      "option1": "Late Binding",
      "option2": "Dynamic Binding",
      "option3": "Runtime Binding",
      "option4": "Early Binding",
      "correct_option": "option4"
    },
    {
      "id": 96,
      "question": "Runtime polymorphism is achieved through which binding mechanism?",
      "option1": "Static Binding",
      "option2": "Early Binding",
      "option3": "Late Binding",
      "option4": "Compile-time Binding",
      "correct_option": "option3"
    },
    {
      "id": 97,
      "question": "An object defined by its attributes rather than a unique ID, like a `Color` or `Money` object, is a what?",
      "option1": "Entity Object",
      "option2": "Value Object",
      "option3": "Service Object",
      "option4": "Data Transfer Object",
      "correct_option": "option2"
    },
    {
      "id": 98,
      "question": "Which pattern passes a request along a series of objects until one of them handles it?",
      "option1": "Mediator",
      "option2": "Command",
      "option3": "Chain of Responsibility",
      "option4": "Iterator",
      "correct_option": "option3"
    },
    {
      "id": 99,
      "question": "Which pattern decouples an abstraction from its implementation so that the two can vary independently?",
      "option1": "Adapter",
      "option2": "Facade",
      "option3": "Bridge",
      "option4": "Decorator",
      "correct_option": "option3"
    },
    {
      "id": 100,
      "question": "A reference to executable code that is passed as an argument to other code is called a(n) what?",
      "option1": "Callback",
      "option2": "Pointer",
      "option3": "Promise",
      "option4": "Future",
      "correct_option": "option1"
    }
  ]
}